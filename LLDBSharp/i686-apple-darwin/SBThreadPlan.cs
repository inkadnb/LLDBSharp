//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class ThreadPlan : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlanC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlanC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr threadPlan);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlanC2ERNS_8SBThreadEPKc")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr thread, global::System.IntPtr class_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlanD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan24GetStopReasonDataAtIndexEj")]
            internal static extern ulong GetStopReasonDataAtIndex_0(global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBThreadPlan9GetThreadEv")]
            internal static extern void GetThread_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBThreadPlan14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan14IsPlanCompleteEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsPlanComplete_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan31QueueThreadPlanForStepOverRangeERNS_9SBAddressEy")]
            internal static extern void QueueThreadPlanForStepOverRange_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr start_address, ulong range_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan29QueueThreadPlanForStepInRangeERNS_9SBAddressEy")]
            internal static extern void QueueThreadPlanForStepInRange_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr start_address, ulong range_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan25QueueThreadPlanForStepOutEjb")]
            internal static extern void QueueThreadPlanForStepOut_0(global::System.IntPtr @return, global::System.IntPtr instance, uint frame_idx_to_step_to, bool first_insn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan30QueueThreadPlanForRunToAddressENS_9SBAddressE")]
            internal static extern void QueueThreadPlanForRunToAddress_0(global::System.IntPtr @return, global::System.IntPtr instance, LLDB.Address.Internal address);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan13GetStopReasonEv")]
            internal static extern LLDB.StopReason GetStopReason_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan22GetStopReasonDataCountEv")]
            internal static extern uint GetStopReasonDataCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBThreadPlan15SetPlanCompleteEb")]
            internal static extern void SetPlanComplete_0(global::System.IntPtr instance, bool success);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ThreadPlan> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ThreadPlan>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static ThreadPlan __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new ThreadPlan(native.ToPointer(), skipVTables);
        }

        public static ThreadPlan __CreateInstance(ThreadPlan.Internal native, bool skipVTables = false)
        {
            return new ThreadPlan(native, skipVTables);
        }

        private static void* __CopyValue(ThreadPlan.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.ThreadPlan.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ThreadPlan(ThreadPlan.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ThreadPlan(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ThreadPlan()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public ThreadPlan(LLDB.ThreadPlan threadPlan)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(threadPlan, null))
                throw new global::System.ArgumentNullException("threadPlan", "Cannot be null because it is a C++ reference (&).");
            var arg0 = threadPlan.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public ThreadPlan(LLDB.Thread thread, string class_name)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(thread, null))
                throw new global::System.ArgumentNullException("thread", "Cannot be null because it is a C++ reference (&).");
            var arg0 = thread.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(class_name);
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.ThreadPlan __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        /// <summary>
        /// <para>Get information associated with a stop reason.</para>
        /// </summary>
        /// <remarks>
        /// <para>Breakpoint stop reasons will have data that consists of pairs of </para>
        /// <para>breakpoint IDs followed by the breakpoint location IDs (they always come</para>
        /// <para>in pairs).</para>
        /// <para>Stop Reason              Count Data Type</para>
        /// <para>======================== ===== =========================================</para>
        /// <para>eStopReasonNone          0</para>
        /// <para>eStopReasonTrace         0</para>
        /// <para>eStopReasonBreakpoint    N     duple: {breakpoint id, location id}</para>
        /// <para>eStopReasonWatchpoint    1     watchpoint id</para>
        /// <para>eStopReasonSignal        1     unix signal number</para>
        /// <para>eStopReasonException     N     exception data</para>
        /// <para>eStopReasonExec          0</para>
        /// <para>eStopReasonPlanComplete  0</para>
        /// </remarks>
        public ulong GetStopReasonDataAtIndex(uint idx)
        {
            var __ret = Internal.GetStopReasonDataAtIndex_0((__Instance + __PointerAdjustment), idx);
            return __ret;
        }

        public LLDB.Thread GetThread()
        {
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThread_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsPlanComplete()
        {
            var __ret = Internal.IsPlanComplete_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_1((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.ThreadPlan QueueThreadPlanForStepOverRange(LLDB.Address start_address, ulong range_size)
        {
            if (ReferenceEquals(start_address, null))
                throw new global::System.ArgumentNullException("start_address", "Cannot be null because it is a C++ reference (&).");
            var arg0 = start_address.__Instance;
            var __ret = new LLDB.ThreadPlan.Internal();
            Internal.QueueThreadPlanForStepOverRange_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, range_size);
            return LLDB.ThreadPlan.__CreateInstance(__ret);
        }

        public LLDB.ThreadPlan QueueThreadPlanForStepInRange(LLDB.Address start_address, ulong range_size)
        {
            if (ReferenceEquals(start_address, null))
                throw new global::System.ArgumentNullException("start_address", "Cannot be null because it is a C++ reference (&).");
            var arg0 = start_address.__Instance;
            var __ret = new LLDB.ThreadPlan.Internal();
            Internal.QueueThreadPlanForStepInRange_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, range_size);
            return LLDB.ThreadPlan.__CreateInstance(__ret);
        }

        public LLDB.ThreadPlan QueueThreadPlanForStepOut(uint frame_idx_to_step_to, bool first_insn)
        {
            var __ret = new LLDB.ThreadPlan.Internal();
            Internal.QueueThreadPlanForStepOut_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), frame_idx_to_step_to, first_insn);
            return LLDB.ThreadPlan.__CreateInstance(__ret);
        }

        public LLDB.ThreadPlan QueueThreadPlanForRunToAddress(LLDB.Address address)
        {
            var arg0 = ReferenceEquals(address, null) ? new LLDB.Address.Internal() : *(LLDB.Address.Internal*) (address.__Instance);
            var __ret = new LLDB.ThreadPlan.Internal();
            Internal.QueueThreadPlanForRunToAddress_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return LLDB.ThreadPlan.__CreateInstance(__ret);
        }

        public LLDB.StopReason StopReason
        {
            get
            {
                var __ret = Internal.GetStopReason_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint StopReasonDataCount
        {
            get
            {
                var __ret = Internal.GetStopReasonDataCount_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool PlanComplete
        {
            set
            {
                Internal.SetPlanComplete_0((__Instance + __PointerAdjustment), value);
            }
        }
    }
}
