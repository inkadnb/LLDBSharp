//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class HostOS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb8SBHostOSC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb8SBHostOS18GetProgramFileSpecEv")]
            internal static extern void GetProgramFileSpec_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb8SBHostOS17GetLLDBPythonPathEv")]
            internal static extern void GetLLDBPythonPath_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb8SBHostOS11GetLLDBPathENS_8PathTypeE")]
            internal static extern void GetLLDBPath_0(global::System.IntPtr @return, LLDB.PathType path_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb8SBHostOS13ThreadCreatedEPKc")]
            internal static extern void ThreadCreated_0(global::System.IntPtr name);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, HostOS> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, HostOS>();

        private readonly bool __ownsNativeInstance;

        public static HostOS __CreateInstance(global::System.IntPtr native)
        {
            return new HostOS((HostOS.Internal*) native);
        }

        public static HostOS __CreateInstance(HostOS.Internal native)
        {
            return new HostOS(native);
        }

        private static HostOS.Internal* __CopyValue(HostOS.Internal native)
        {
            var ret = (HostOS.Internal*) Marshal.AllocHGlobal(1);
            *ret = native;
            return ret;
        }

        private HostOS(HostOS.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HostOS(HostOS.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public HostOS()
        {
            __Instance = Marshal.AllocHGlobal(1);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.HostOS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static LLDB.FileSpec GetProgramFileSpec()
        {
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetProgramFileSpec_0(new IntPtr(&__ret));
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public static LLDB.FileSpec GetLLDBPythonPath()
        {
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetLLDBPythonPath_0(new IntPtr(&__ret));
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public static LLDB.FileSpec GetLLDBPath(LLDB.PathType path_type)
        {
            var arg0 = path_type;
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetLLDBPath_0(new IntPtr(&__ret), arg0);
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public static void ThreadCreated(string name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            Internal.ThreadCreated_0(arg0);
            Marshal.FreeHGlobal(arg0);
        }
    }
}
