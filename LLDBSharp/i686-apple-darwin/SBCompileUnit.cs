//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class CompileUnit : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnitC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnitC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnitD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit11GetFileSpecEv")]
            internal static extern void GetFileSpec_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit19GetLineEntryAtIndexEj")]
            internal static extern void GetLineEntryAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit18FindLineEntryIndexEjjPNS_10SBFileSpecE")]
            internal static extern uint FindLineEntryIndex_0(global::System.IntPtr instance, uint start_idx, uint line, global::System.IntPtr inline_file_spec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit18FindLineEntryIndexEjjPNS_10SBFileSpecEb")]
            internal static extern uint FindLineEntryIndex_1(global::System.IntPtr instance, uint start_idx, uint line, global::System.IntPtr inline_file_spec, bool exact);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit21GetSupportFileAtIndexEj")]
            internal static extern void GetSupportFileAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnit20FindSupportFileIndexEjRKNS_10SBFileSpecEb")]
            internal static extern uint FindSupportFileIndex_0(global::System.IntPtr instance, uint start_idx, global::System.IntPtr sb_file, bool full);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnit8GetTypesEj")]
            internal static extern void GetTypes_0(global::System.IntPtr @return, global::System.IntPtr instance, uint type_mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUniteqERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnitneERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnit14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit17GetNumLineEntriesEv")]
            internal static extern uint GetNumLineEntries_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBCompileUnit18GetNumSupportFilesEv")]
            internal static extern uint GetNumSupportFiles_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBCompileUnit11GetLanguageEv")]
            internal static extern LLDB.LanguageType GetLanguage_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CompileUnit> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CompileUnit>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static CompileUnit __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CompileUnit(native.ToPointer(), skipVTables);
        }

        public static CompileUnit __CreateInstance(CompileUnit.Internal native, bool skipVTables = false)
        {
            return new CompileUnit(native, skipVTables);
        }

        private static void* __CopyValue(CompileUnit.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.CompileUnit.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CompileUnit(CompileUnit.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CompileUnit(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CompileUnit()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public CompileUnit(LLDB.CompileUnit rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.CompileUnit __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.FileSpec GetFileSpec()
        {
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetFileSpec_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public LLDB.LineEntry GetLineEntryAtIndex(uint idx)
        {
            var __ret = new LLDB.LineEntry.Internal();
            Internal.GetLineEntryAtIndex_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), idx);
            return LLDB.LineEntry.__CreateInstance(__ret);
        }

        public uint FindLineEntryIndex(uint start_idx, uint line, LLDB.FileSpec inline_file_spec)
        {
            var arg2 = ReferenceEquals(inline_file_spec, null) ? global::System.IntPtr.Zero : inline_file_spec.__Instance;
            var __ret = Internal.FindLineEntryIndex_0((__Instance + __PointerAdjustment), start_idx, line, arg2);
            return __ret;
        }

        public uint FindLineEntryIndex(uint start_idx, uint line, LLDB.FileSpec inline_file_spec, bool exact)
        {
            var arg2 = ReferenceEquals(inline_file_spec, null) ? global::System.IntPtr.Zero : inline_file_spec.__Instance;
            var __ret = Internal.FindLineEntryIndex_1((__Instance + __PointerAdjustment), start_idx, line, arg2, exact);
            return __ret;
        }

        public LLDB.FileSpec GetSupportFileAtIndex(uint idx)
        {
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetSupportFileAtIndex_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), idx);
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public uint FindSupportFileIndex(uint start_idx, LLDB.FileSpec sb_file, bool full)
        {
            if (ReferenceEquals(sb_file, null))
                throw new global::System.ArgumentNullException("sb_file", "Cannot be null because it is a C++ reference (&).");
            var arg1 = sb_file.__Instance;
            var __ret = Internal.FindSupportFileIndex_0((__Instance + __PointerAdjustment), start_idx, arg1, full);
            return __ret;
        }

        /// <summary>
        /// <para>Get all types matching </para>
        /// <para>from debug info in this</para>
        /// <para>compile unit.</para>
        /// </summary>
        /// <param name="type_mask">
        /// <para>A bitfield that consists of one or more bits logically OR'ed</para>
        /// <para>together from the lldb::TypeClass enumeration. This allows</para>
        /// <para>you to request only structure types, or only class, struct</para>
        /// <para>and union types. Passing in lldb::eTypeClassAny will return</para>
        /// <para>all types found in the debug information for this compile</para>
        /// <para>unit.</para>
        /// </param>
        /// <returns>
        /// <para>A list of types in this compile unit that match</para>
        /// </returns>
        public LLDB.TypeList GetTypes(uint type_mask)
        {
            var __ret = new LLDB.TypeList.Internal();
            Internal.GetTypes_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), type_mask);
            return LLDB.TypeList.__CreateInstance(__ret);
        }

        public static bool operator ==(LLDB.CompileUnit __op, LLDB.CompileUnit rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as CompileUnit;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.CompileUnit __op, LLDB.CompileUnit rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public uint NumLineEntries
        {
            get
            {
                var __ret = Internal.GetNumLineEntries_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumSupportFiles
        {
            get
            {
                var __ret = Internal.GetNumSupportFiles_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.LanguageType Language
        {
            get
            {
                var __ret = Internal.GetLanguage_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
