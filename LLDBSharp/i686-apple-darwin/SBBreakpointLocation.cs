//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class BreakpointLocation : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocationC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocationC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocationD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb20SBBreakpointLocation7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation10GetAddressEv")]
            internal static extern void GetAddress_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation9IsEnabledEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation21SetScriptCallbackBodyEPKc")]
            internal static extern void SetScriptCallbackBody_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr script_body_text);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation10IsResolvedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsResolved_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description, LLDB.DescriptionLevel level);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation13GetBreakpointEv")]
            internal static extern void GetBreakpoint_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation5GetIDEv")]
            internal static extern int GetID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation14GetLoadAddressEv")]
            internal static extern ulong GetLoadAddress_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation10SetEnabledEb")]
            internal static extern void SetEnabled_0(global::System.IntPtr instance, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation14GetIgnoreCountEv")]
            internal static extern uint GetIgnoreCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation14SetIgnoreCountEj")]
            internal static extern void SetIgnoreCount_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation12GetConditionEv")]
            internal static extern global::System.IntPtr GetCondition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation12SetConditionEPKc")]
            internal static extern void SetCondition_0(global::System.IntPtr instance, global::System.IntPtr condition);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation25SetScriptCallbackFunctionEPKc")]
            internal static extern void SetScriptCallbackFunction_0(global::System.IntPtr instance, global::System.IntPtr callback_function_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation11GetThreadIDEv")]
            internal static extern ulong GetThreadID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation11SetThreadIDEy")]
            internal static extern void SetThreadID_0(global::System.IntPtr instance, ulong sb_thread_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb20SBBreakpointLocation14GetThreadIndexEv")]
            internal static extern uint GetThreadIndex_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation14SetThreadIndexEj")]
            internal static extern void SetThreadIndex_0(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb20SBBreakpointLocation13GetThreadNameEv")]
            internal static extern global::System.IntPtr GetThreadName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation13SetThreadNameEPKc")]
            internal static extern void SetThreadName_0(global::System.IntPtr instance, global::System.IntPtr thread_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb20SBBreakpointLocation12GetQueueNameEv")]
            internal static extern global::System.IntPtr GetQueueName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb20SBBreakpointLocation12SetQueueNameEPKc")]
            internal static extern void SetQueueName_0(global::System.IntPtr instance, global::System.IntPtr queue_name);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BreakpointLocation> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BreakpointLocation>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static BreakpointLocation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new BreakpointLocation(native.ToPointer(), skipVTables);
        }

        public static BreakpointLocation __CreateInstance(BreakpointLocation.Internal native, bool skipVTables = false)
        {
            return new BreakpointLocation(native, skipVTables);
        }

        private static void* __CopyValue(BreakpointLocation.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.BreakpointLocation.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private BreakpointLocation(BreakpointLocation.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BreakpointLocation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BreakpointLocation()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public BreakpointLocation(LLDB.BreakpointLocation rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.BreakpointLocation __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Address GetAddress()
        {
            var __ret = new LLDB.Address.Internal();
            Internal.GetAddress_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Address.__CreateInstance(__ret);
        }

        public bool IsEnabled()
        {
            var __ret = Internal.IsEnabled_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Error SetScriptCallbackBody(string script_body_text)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(script_body_text);
            var __ret = new LLDB.Error.Internal();
            Internal.SetScriptCallbackBody_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public bool IsResolved()
        {
            var __ret = Internal.IsResolved_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description, LLDB.DescriptionLevel level)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var arg1 = level;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public LLDB.Breakpoint GetBreakpoint()
        {
            var __ret = new LLDB.Breakpoint.Internal();
            Internal.GetBreakpoint_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Breakpoint.__CreateInstance(__ret);
        }

        public int ID
        {
            get
            {
                var __ret = Internal.GetID_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong LoadAddress
        {
            get
            {
                var __ret = Internal.GetLoadAddress_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool Enabled
        {
            set
            {
                Internal.SetEnabled_0((__Instance + __PointerAdjustment), value);
            }
        }

        public uint IgnoreCount
        {
            get
            {
                var __ret = Internal.GetIgnoreCount_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetIgnoreCount_0((__Instance + __PointerAdjustment), value);
            }
        }

        public string Condition
        {
            get
            {
                var __ret = Internal.GetCondition_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetCondition_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string ScriptCallbackFunction
        {
            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetScriptCallbackFunction_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public ulong ThreadID
        {
            get
            {
                var __ret = Internal.GetThreadID_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetThreadID_0((__Instance + __PointerAdjustment), value);
            }
        }

        public uint ThreadIndex
        {
            get
            {
                var __ret = Internal.GetThreadIndex_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetThreadIndex_0((__Instance + __PointerAdjustment), value);
            }
        }

        public string ThreadName
        {
            get
            {
                var __ret = Internal.GetThreadName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetThreadName_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string QueueName
        {
            get
            {
                var __ret = Internal.GetQueueName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetQueueName_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }
    }
}
