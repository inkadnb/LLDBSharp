//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Address : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddressC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddressC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddressC2ENS_9SBSectionEy")]
            internal static extern void ctor_2(global::System.IntPtr instance, LLDB.Section.Internal section, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddressC2EyRNS_8SBTargetE")]
            internal static extern void ctor_3(global::System.IntPtr instance, ulong load_addr, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddressD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBAddress7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBAddress14GetLoadAddressERKNS_8SBTargetE")]
            internal static extern ulong GetLoadAddress_0(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress10SetAddressENS_9SBSectionEy")]
            internal static extern void SetAddress_0(global::System.IntPtr instance, LLDB.Section.Internal section, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress14SetLoadAddressEyRNS_8SBTargetE")]
            internal static extern void SetLoadAddress_0(global::System.IntPtr instance, ulong load_addr, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress13OffsetAddressEy")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OffsetAddress_0(global::System.IntPtr instance, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress16GetSymbolContextEj")]
            internal static extern void GetSymbolContext_0(global::System.IntPtr @return, global::System.IntPtr instance, uint resolve_scope);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress10GetSectionEv")]
            internal static extern void GetSection_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress9GetModuleEv")]
            internal static extern void GetModule_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress14GetCompileUnitEv")]
            internal static extern void GetCompileUnit_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress11GetFunctionEv")]
            internal static extern void GetFunction_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress8GetBlockEv")]
            internal static extern void GetBlock_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress9GetSymbolEv")]
            internal static extern void GetSymbol_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress12GetLineEntryEv")]
            internal static extern void GetLineEntry_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBAddress14GetFileAddressEv")]
            internal static extern ulong GetFileAddress_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress9GetOffsetEv")]
            internal static extern ulong GetOffset_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBAddress15GetAddressClassEv")]
            internal static extern LLDB.AddressClass GetAddressClass_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Address> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Address>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Address __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Address(native.ToPointer(), skipVTables);
        }

        public static Address __CreateInstance(Address.Internal native, bool skipVTables = false)
        {
            return new Address(native, skipVTables);
        }

        private static void* __CopyValue(Address.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.Address.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Address(Address.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Address(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Address()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Address(LLDB.Address rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public Address(LLDB.Section section, ulong offset)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(section, null) ? new LLDB.Section.Internal() : *(LLDB.Section.Internal*) (section.__Instance);
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0, offset);
        }

        public Address(ulong load_addr, LLDB.Target target)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg1 = target.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), load_addr, arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Address __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public ulong GetLoadAddress(LLDB.Target target)
        {
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg0 = target.__Instance;
            var __ret = Internal.GetLoadAddress_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void SetAddress(LLDB.Section section, ulong offset)
        {
            var arg0 = ReferenceEquals(section, null) ? new LLDB.Section.Internal() : *(LLDB.Section.Internal*) (section.__Instance);
            Internal.SetAddress_0((__Instance + __PointerAdjustment), arg0, offset);
        }

        public void SetLoadAddress(ulong load_addr, LLDB.Target target)
        {
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg1 = target.__Instance;
            Internal.SetLoadAddress_0((__Instance + __PointerAdjustment), load_addr, arg1);
        }

        public bool OffsetAddress(ulong offset)
        {
            var __ret = Internal.OffsetAddress_0((__Instance + __PointerAdjustment), offset);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public LLDB.SymbolContext GetSymbolContext(uint resolve_scope)
        {
            var __ret = new LLDB.SymbolContext.Internal();
            Internal.GetSymbolContext_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), resolve_scope);
            return LLDB.SymbolContext.__CreateInstance(__ret);
        }

        public LLDB.Section GetSection()
        {
            var __ret = new LLDB.Section.Internal();
            Internal.GetSection_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Section.__CreateInstance(__ret);
        }

        public LLDB.Module GetModule()
        {
            var __ret = new LLDB.Module.Internal();
            Internal.GetModule_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Module.__CreateInstance(__ret);
        }

        public LLDB.CompileUnit GetCompileUnit()
        {
            var __ret = new LLDB.CompileUnit.Internal();
            Internal.GetCompileUnit_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.CompileUnit.__CreateInstance(__ret);
        }

        public LLDB.Function GetFunction()
        {
            var __ret = new LLDB.Function.Internal();
            Internal.GetFunction_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Function.__CreateInstance(__ret);
        }

        public LLDB.Block GetBlock()
        {
            var __ret = new LLDB.Block.Internal();
            Internal.GetBlock_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Block.__CreateInstance(__ret);
        }

        public LLDB.Symbol GetSymbol()
        {
            var __ret = new LLDB.Symbol.Internal();
            Internal.GetSymbol_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Symbol.__CreateInstance(__ret);
        }

        public LLDB.LineEntry GetLineEntry()
        {
            var __ret = new LLDB.LineEntry.Internal();
            Internal.GetLineEntry_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.LineEntry.__CreateInstance(__ret);
        }

        public ulong FileAddress
        {
            get
            {
                var __ret = Internal.GetFileAddress_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong Offset
        {
            get
            {
                var __ret = Internal.GetOffset_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.AddressClass AddressClass
        {
            get
            {
                var __ret = Internal.GetAddressClass_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
