//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Queue : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueueC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueueC2ERKS0_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueueD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBQueue7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue10GetProcessEv")]
            internal static extern void GetProcess_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue16GetThreadAtIndexEj")]
            internal static extern void GetThreadAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue21GetPendingItemAtIndexEj")]
            internal static extern void GetPendingItemAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue12FetchThreadsEv")]
            internal static extern void FetchThreads_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue10FetchItemsEv")]
            internal static extern void FetchItems_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBQueue10GetQueueIDEv")]
            internal static extern ulong GetQueueID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBQueue7GetNameEv")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBQueue10GetIndexIDEv")]
            internal static extern uint GetIndexID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue13GetNumThreadsEv")]
            internal static extern uint GetNumThreads_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue18GetNumPendingItemsEv")]
            internal static extern uint GetNumPendingItems_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue18GetNumRunningItemsEv")]
            internal static extern uint GetNumRunningItems_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBQueue7GetKindEv")]
            internal static extern LLDB.QueueKind GetKind_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Queue> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Queue>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Queue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Queue(native.ToPointer(), skipVTables);
        }

        public static Queue __CreateInstance(Queue.Internal native, bool skipVTables = false)
        {
            return new Queue(native, skipVTables);
        }

        private static void* __CopyValue(Queue.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.Queue.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Queue(Queue.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Queue(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Queue()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Queue(LLDB.Queue rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Queue __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public LLDB.Process GetProcess()
        {
            var __ret = new LLDB.Process.Internal();
            Internal.GetProcess_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Process.__CreateInstance(__ret);
        }

        public LLDB.Thread GetThreadAtIndex(uint _0)
        {
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThreadAtIndex_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), _0);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public LLDB.QueueItem GetPendingItemAtIndex(uint _0)
        {
            var __ret = new LLDB.QueueItem.Internal();
            Internal.GetPendingItemAtIndex_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), _0);
            return LLDB.QueueItem.__CreateInstance(__ret);
        }

        protected void FetchThreads()
        {
            Internal.FetchThreads_0((__Instance + __PointerAdjustment));
        }

        protected void FetchItems()
        {
            Internal.FetchItems_0((__Instance + __PointerAdjustment));
        }

        public ulong QueueID
        {
            get
            {
                var __ret = Internal.GetQueueID_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint IndexID
        {
            get
            {
                var __ret = Internal.GetIndexID_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumThreads
        {
            get
            {
                var __ret = Internal.GetNumThreads_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumPendingItems
        {
            get
            {
                var __ret = Internal.GetNumPendingItems_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumRunningItems
        {
            get
            {
                var __ret = Internal.GetNumRunningItems_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.QueueKind Kind
        {
            get
            {
                var __ret = Internal.GetKind_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
