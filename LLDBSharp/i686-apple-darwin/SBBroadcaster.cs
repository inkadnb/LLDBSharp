//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Broadcaster : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(8)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcasterC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcasterC2EPKc")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcasterC2ERKS0_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcasterD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBBroadcaster7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster20BroadcastEventByTypeEjb")]
            internal static extern void BroadcastEventByType_0(global::System.IntPtr instance, uint event_type, bool unique);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster14BroadcastEventERKNS_7SBEventEb")]
            internal static extern void BroadcastEvent_0(global::System.IntPtr instance, global::System.IntPtr @event, bool unique);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster26AddInitialEventsToListenerERKNS_10SBListenerEj")]
            internal static extern void AddInitialEventsToListener_0(global::System.IntPtr instance, global::System.IntPtr listener, uint requested_events);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster11AddListenerERKNS_10SBListenerEj")]
            internal static extern uint AddListener_0(global::System.IntPtr instance, global::System.IntPtr listener, uint event_mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster21EventTypeHasListenersEj")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EventTypeHasListeners_0(global::System.IntPtr instance, uint event_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBBroadcaster14RemoveListenerERKNS_10SBListenerEj")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RemoveListener_0(global::System.IntPtr instance, global::System.IntPtr listener, uint event_mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBBroadcastereqERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBBroadcasterneERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBBroadcasterltERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBBroadcaster7GetNameEv")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Broadcaster> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Broadcaster>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Broadcaster __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Broadcaster(native.ToPointer(), skipVTables);
        }

        public static Broadcaster __CreateInstance(Broadcaster.Internal native, bool skipVTables = false)
        {
            return new Broadcaster(native, skipVTables);
        }

        private static void* __CopyValue(Broadcaster.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            LLDB.Broadcaster.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Broadcaster(Broadcaster.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Broadcaster(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Broadcaster()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Broadcaster(string name)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public Broadcaster(LLDB.Broadcaster rhs)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Broadcaster __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void BroadcastEventByType(uint event_type, bool unique)
        {
            Internal.BroadcastEventByType_0((__Instance + __PointerAdjustment), event_type, unique);
        }

        public void BroadcastEvent(LLDB.Event @event, bool unique)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.BroadcastEvent_0((__Instance + __PointerAdjustment), arg0, unique);
        }

        public void AddInitialEventsToListener(LLDB.Listener listener, uint requested_events)
        {
            if (ReferenceEquals(listener, null))
                throw new global::System.ArgumentNullException("listener", "Cannot be null because it is a C++ reference (&).");
            var arg0 = listener.__Instance;
            Internal.AddInitialEventsToListener_0((__Instance + __PointerAdjustment), arg0, requested_events);
        }

        public uint AddListener(LLDB.Listener listener, uint event_mask)
        {
            if (ReferenceEquals(listener, null))
                throw new global::System.ArgumentNullException("listener", "Cannot be null because it is a C++ reference (&).");
            var arg0 = listener.__Instance;
            var __ret = Internal.AddListener_0((__Instance + __PointerAdjustment), arg0, event_mask);
            return __ret;
        }

        public bool EventTypeHasListeners(uint event_type)
        {
            var __ret = Internal.EventTypeHasListeners_0((__Instance + __PointerAdjustment), event_type);
            return __ret;
        }

        public bool RemoveListener(LLDB.Listener listener, uint event_mask)
        {
            if (ReferenceEquals(listener, null))
                throw new global::System.ArgumentNullException("listener", "Cannot be null because it is a C++ reference (&).");
            var arg0 = listener.__Instance;
            var __ret = Internal.RemoveListener_0((__Instance + __PointerAdjustment), arg0, event_mask);
            return __ret;
        }

        public static bool operator ==(LLDB.Broadcaster __op, LLDB.Broadcaster rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Broadcaster;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.Broadcaster __op, LLDB.Broadcaster rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >(LLDB.Broadcaster __op, LLDB.Broadcaster rhs)
        {
            return !(__op < rhs);
        }

        public static bool operator <(LLDB.Broadcaster __op, LLDB.Broadcaster rhs)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            return __ret;
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }
}
