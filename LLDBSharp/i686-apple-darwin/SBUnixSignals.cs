//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class UnixSignals : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignalsC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignalsC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignalsD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignals5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals18GetSignalAsCStringEi")]
            internal static extern global::System.IntPtr GetSignalAsCString_0(global::System.IntPtr instance, int signo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals23GetSignalNumberFromNameEPKc")]
            internal static extern int GetSignalNumberFromName_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals17GetShouldSuppressEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetShouldSuppress_0(global::System.IntPtr instance, int signo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignals17SetShouldSuppressEib")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetShouldSuppress_0(global::System.IntPtr instance, int signo, bool value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals13GetShouldStopEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetShouldStop_0(global::System.IntPtr instance, int signo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignals13SetShouldStopEib")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetShouldStop_0(global::System.IntPtr instance, int signo, bool value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals15GetShouldNotifyEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetShouldNotify_0(global::System.IntPtr instance, int signo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb13SBUnixSignals15SetShouldNotifyEib")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetShouldNotify_0(global::System.IntPtr instance, int signo, bool value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals16GetSignalAtIndexEi")]
            internal static extern int GetSignalAtIndex_0(global::System.IntPtr instance, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb13SBUnixSignals13GetNumSignalsEv")]
            internal static extern int GetNumSignals_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UnixSignals> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UnixSignals>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static UnixSignals __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new UnixSignals(native.ToPointer(), skipVTables);
        }

        public static UnixSignals __CreateInstance(UnixSignals.Internal native, bool skipVTables = false)
        {
            return new UnixSignals(native, skipVTables);
        }

        private static void* __CopyValue(UnixSignals.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.UnixSignals.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private UnixSignals(UnixSignals.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UnixSignals(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public UnixSignals()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public UnixSignals(LLDB.UnixSignals rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.UnixSignals __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public string GetSignalAsCString(int signo)
        {
            var __ret = Internal.GetSignalAsCString_0((__Instance + __PointerAdjustment), signo);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public int GetSignalNumberFromName(string name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            var __ret = Internal.GetSignalNumberFromName_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public bool GetShouldSuppress(int signo)
        {
            var __ret = Internal.GetShouldSuppress_0((__Instance + __PointerAdjustment), signo);
            return __ret;
        }

        public bool SetShouldSuppress(int signo, bool value)
        {
            var __ret = Internal.SetShouldSuppress_0((__Instance + __PointerAdjustment), signo, value);
            return __ret;
        }

        public bool GetShouldStop(int signo)
        {
            var __ret = Internal.GetShouldStop_0((__Instance + __PointerAdjustment), signo);
            return __ret;
        }

        public bool SetShouldStop(int signo, bool value)
        {
            var __ret = Internal.SetShouldStop_0((__Instance + __PointerAdjustment), signo, value);
            return __ret;
        }

        public bool GetShouldNotify(int signo)
        {
            var __ret = Internal.GetShouldNotify_0((__Instance + __PointerAdjustment), signo);
            return __ret;
        }

        public bool SetShouldNotify(int signo, bool value)
        {
            var __ret = Internal.SetShouldNotify_0((__Instance + __PointerAdjustment), signo, value);
            return __ret;
        }

        public int GetSignalAtIndex(int index)
        {
            var __ret = Internal.GetSignalAtIndex_0((__Instance + __PointerAdjustment), index);
            return __ret;
        }

        public int NumSignals
        {
            get
            {
                var __ret = Internal.GetNumSignals_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
