//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Breakpoint : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpointC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpointC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpointD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpointeqERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpointneERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint23ClearAllBreakpointSitesEv")]
            internal static extern void ClearAllBreakpointSites_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint21FindLocationByAddressEy")]
            internal static extern void FindLocationByAddress_0(global::System.IntPtr @return, global::System.IntPtr instance, ulong vm_addr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint23FindLocationIDByAddressEy")]
            internal static extern int FindLocationIDByAddress_0(global::System.IntPtr instance, ulong vm_addr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint16FindLocationByIDEi")]
            internal static extern void FindLocationByID_0(global::System.IntPtr @return, global::System.IntPtr instance, int bp_loc_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint18GetLocationAtIndexEj")]
            internal static extern void GetLocationAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint9IsEnabledEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint9IsOneShotEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsOneShot_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint10IsInternalEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsInternal_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint11SetCallbackEPFbPvRNS_9SBProcessERNS_8SBThreadERNS_20SBBreakpointLocationEES1_")]
            internal static extern void SetCallback_0(global::System.IntPtr instance, global::System.IntPtr callback, global::System.IntPtr baton);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint21SetScriptCallbackBodyEPKc")]
            internal static extern void SetScriptCallbackBody_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr script_body_text);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint7AddNameEPKc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AddName_0(global::System.IntPtr instance, global::System.IntPtr new_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint10RemoveNameEPKc")]
            internal static extern void RemoveName_0(global::System.IntPtr instance, global::System.IntPtr name_to_remove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint11MatchesNameEPKc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MatchesName_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint8GetNamesERNS_12SBStringListE")]
            internal static extern void GetNames_0(global::System.IntPtr instance, global::System.IntPtr names);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint22EventIsBreakpointEventERKNS_7SBEventE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EventIsBreakpointEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint31GetBreakpointEventTypeFromEventERKNS_7SBEventE")]
            internal static extern LLDB.BreakpointEventType GetBreakpointEventTypeFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint22GetBreakpointFromEventERKNS_7SBEventE")]
            internal static extern void GetBreakpointFromEvent_0(global::System.IntPtr @return, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint37GetBreakpointLocationAtIndexFromEventERKNS_7SBEventEj")]
            internal static extern void GetBreakpointLocationAtIndexFromEvent_0(global::System.IntPtr @return, global::System.IntPtr @event, uint loc_idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint34GetNumBreakpointLocationsFromEventERKNS_7SBEventE")]
            internal static extern uint GetNumBreakpointLocationsFromEvent_0(global::System.IntPtr event_sp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint5GetIDEv")]
            internal static extern int GetID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint10SetEnabledEb")]
            internal static extern void SetEnabled_0(global::System.IntPtr instance, bool enable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint10SetOneShotEb")]
            internal static extern void SetOneShot_0(global::System.IntPtr instance, bool one_shot);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint11GetHitCountEv")]
            internal static extern uint GetHitCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint14GetIgnoreCountEv")]
            internal static extern uint GetIgnoreCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint14SetIgnoreCountEj")]
            internal static extern void SetIgnoreCount_0(global::System.IntPtr instance, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint12GetConditionEv")]
            internal static extern global::System.IntPtr GetCondition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint12SetConditionEPKc")]
            internal static extern void SetCondition_0(global::System.IntPtr instance, global::System.IntPtr condition);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint11GetThreadIDEv")]
            internal static extern ulong GetThreadID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint11SetThreadIDEy")]
            internal static extern void SetThreadID_0(global::System.IntPtr instance, ulong sb_thread_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint14GetThreadIndexEv")]
            internal static extern uint GetThreadIndex_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint14SetThreadIndexEj")]
            internal static extern void SetThreadIndex_0(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint13GetThreadNameEv")]
            internal static extern global::System.IntPtr GetThreadName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint13SetThreadNameEPKc")]
            internal static extern void SetThreadName_0(global::System.IntPtr instance, global::System.IntPtr thread_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint12GetQueueNameEv")]
            internal static extern global::System.IntPtr GetQueueName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint12SetQueueNameEPKc")]
            internal static extern void SetQueueName_0(global::System.IntPtr instance, global::System.IntPtr queue_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBBreakpoint25SetScriptCallbackFunctionEPKc")]
            internal static extern void SetScriptCallbackFunction_0(global::System.IntPtr instance, global::System.IntPtr callback_function_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint23GetNumResolvedLocationsEv")]
            internal static extern uint GetNumResolvedLocations_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb12SBBreakpoint15GetNumLocationsEv")]
            internal static extern uint GetNumLocations_0(global::System.IntPtr instance);
        }

        [UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate bool BreakpointHitCallback(global::System.IntPtr baton, global::System.IntPtr process, global::System.IntPtr thread, global::System.IntPtr location);

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Breakpoint> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Breakpoint>();

        private readonly bool __ownsNativeInstance;

        public static Breakpoint __CreateInstance(global::System.IntPtr native)
        {
            return new Breakpoint((Breakpoint.Internal*) native);
        }

        public static Breakpoint __CreateInstance(Breakpoint.Internal native)
        {
            return new Breakpoint(native);
        }

        private static Breakpoint.Internal* __CopyValue(Breakpoint.Internal native)
        {
            var ret = (Breakpoint.Internal*) Marshal.AllocHGlobal(8);
            *ret = native;
            return ret;
        }

        private Breakpoint(Breakpoint.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Breakpoint(Breakpoint.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public Breakpoint()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.Breakpoint __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static bool operator ==(LLDB.Breakpoint __op, LLDB.Breakpoint rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Breakpoint;
        }

        public static bool operator !=(LLDB.Breakpoint __op, LLDB.Breakpoint rhs)
        {
            var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
            var arg1 = ReferenceEquals(rhs, null) ? global::System.IntPtr.Zero : rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public void ClearAllBreakpointSites()
        {
            Internal.ClearAllBreakpointSites_0(__Instance);
        }

        public LLDB.BreakpointLocation FindLocationByAddress(ulong vm_addr)
        {
            var arg0 = vm_addr;
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.FindLocationByAddress_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public int FindLocationIDByAddress(ulong vm_addr)
        {
            var arg0 = vm_addr;
            var __ret = Internal.FindLocationIDByAddress_0(__Instance, arg0);
            return __ret;
        }

        public LLDB.BreakpointLocation FindLocationByID(int bp_loc_id)
        {
            var arg0 = bp_loc_id;
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.FindLocationByID_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public LLDB.BreakpointLocation GetLocationAtIndex(uint index)
        {
            var arg0 = index;
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.GetLocationAtIndex_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public bool IsEnabled()
        {
            var __ret = Internal.IsEnabled_0(__Instance);
            return __ret;
        }

        public bool IsOneShot()
        {
            var __ret = Internal.IsOneShot_0(__Instance);
            return __ret;
        }

        public bool IsInternal()
        {
            var __ret = Internal.IsInternal_0(__Instance);
            return __ret;
        }

        public void SetCallback(LLDB.Breakpoint.BreakpointHitCallback callback, global::System.IntPtr baton)
        {
            var arg0 = Marshal.GetFunctionPointerForDelegate(callback);
            var arg1 = baton;
            Internal.SetCallback_0(__Instance, arg0, arg1);
        }

        public LLDB.Error SetScriptCallbackBody(string script_body_text)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(script_body_text);
            var __ret = new LLDB.Error.Internal();
            Internal.SetScriptCallbackBody_0(new IntPtr(&__ret), __Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public bool AddName(string new_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(new_name);
            var __ret = Internal.AddName_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public void RemoveName(string name_to_remove)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name_to_remove);
            Internal.RemoveName_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public bool MatchesName(string name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            var __ret = Internal.MatchesName_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public void GetNames(LLDB.StringList names)
        {
            var arg0 = ReferenceEquals(names, null) ? global::System.IntPtr.Zero : names.__Instance;
            Internal.GetNames_0(__Instance, arg0);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            var arg0 = ReferenceEquals(description, null) ? global::System.IntPtr.Zero : description.__Instance;
            var __ret = Internal.GetDescription_0(__Instance, arg0);
            return __ret;
        }

        public static bool EventIsBreakpointEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.EventIsBreakpointEvent_0(arg0);
            return __ret;
        }

        public static LLDB.BreakpointEventType GetBreakpointEventTypeFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.GetBreakpointEventTypeFromEvent_0(arg0);
            return __ret;
        }

        public static LLDB.Breakpoint GetBreakpointFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = new LLDB.Breakpoint.Internal();
            Internal.GetBreakpointFromEvent_0(new IntPtr(&__ret), arg0);
            return LLDB.Breakpoint.__CreateInstance(__ret);
        }

        public static LLDB.BreakpointLocation GetBreakpointLocationAtIndexFromEvent(LLDB.Event @event, uint loc_idx)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var arg1 = loc_idx;
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.GetBreakpointLocationAtIndexFromEvent_0(new IntPtr(&__ret), arg0, arg1);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public static uint GetNumBreakpointLocationsFromEvent(LLDB.Event event_sp)
        {
            var arg0 = ReferenceEquals(event_sp, null) ? global::System.IntPtr.Zero : event_sp.__Instance;
            var __ret = Internal.GetNumBreakpointLocationsFromEvent_0(arg0);
            return __ret;
        }

        public int ID
        {
            get
            {
                var __ret = Internal.GetID_0(__Instance);
                return __ret;
            }
        }

        public bool Enabled
        {
            set
            {
                Internal.SetEnabled_0(__Instance, value);
            }
        }

        public bool OneShot
        {
            set
            {
                Internal.SetOneShot_0(__Instance, value);
            }
        }

        public uint HitCount
        {
            get
            {
                var __ret = Internal.GetHitCount_0(__Instance);
                return __ret;
            }
        }

        public uint IgnoreCount
        {
            get
            {
                var __ret = Internal.GetIgnoreCount_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetIgnoreCount_0(__Instance, arg0);
            }
        }

        public string Condition
        {
            get
            {
                var __ret = Internal.GetCondition_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetCondition_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public ulong ThreadID
        {
            get
            {
                var __ret = Internal.GetThreadID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetThreadID_0(__Instance, arg0);
            }
        }

        public uint ThreadIndex
        {
            get
            {
                var __ret = Internal.GetThreadIndex_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetThreadIndex_0(__Instance, arg0);
            }
        }

        public string ThreadName
        {
            get
            {
                var __ret = Internal.GetThreadName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetThreadName_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string QueueName
        {
            get
            {
                var __ret = Internal.GetQueueName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetQueueName_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string ScriptCallbackFunction
        {
            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetScriptCallbackFunction_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public uint NumResolvedLocations
        {
            get
            {
                var __ret = Internal.GetNumResolvedLocations_0(__Instance);
                return __ret;
            }
        }

        public uint NumLocations
        {
            get
            {
                var __ret = Internal.GetNumLocations_0(__Instance);
                return __ret;
            }
        }
    }
}
