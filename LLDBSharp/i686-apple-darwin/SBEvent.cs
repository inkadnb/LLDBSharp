//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Event : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(8)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEventC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEventC2EjPKcj")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint @event, global::System.IntPtr cstr, uint cstr_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEventD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBEvent7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBEvent14GetBroadcasterEv")]
            internal static extern void GetBroadcaster_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEvent21BroadcasterMatchesPtrEPKNS_13SBBroadcasterE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool BroadcasterMatchesPtr_0(global::System.IntPtr instance, global::System.IntPtr broadcaster);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEvent21BroadcasterMatchesRefERKNS_13SBBroadcasterE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool BroadcasterMatchesRef_0(global::System.IntPtr instance, global::System.IntPtr broadcaster);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEvent5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEvent19GetCStringFromEventERKS0_")]
            internal static extern global::System.IntPtr GetCStringFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEvent14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBEvent13GetDataFlavorEv")]
            internal static extern global::System.IntPtr GetDataFlavor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBEvent7GetTypeEv")]
            internal static extern uint GetType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBEvent19GetBroadcasterClassEv")]
            internal static extern global::System.IntPtr GetBroadcasterClass_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Event> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Event>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Event __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Event(native.ToPointer(), skipVTables);
        }

        public static Event __CreateInstance(Event.Internal native, bool skipVTables = false)
        {
            return new Event(native, skipVTables);
        }

        private static void* __CopyValue(Event.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            LLDB.Event.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Event(Event.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Event(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Event()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Event(LLDB.Event rhs)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public Event(uint @event, string cstr, uint cstr_len)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = Marshal.StringToHGlobalAnsi(cstr);
            Internal.ctor_2((__Instance + __PointerAdjustment), @event, arg1, cstr_len);
            Marshal.FreeHGlobal(arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Event __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Broadcaster GetBroadcaster()
        {
            var __ret = new LLDB.Broadcaster.Internal();
            Internal.GetBroadcaster_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Broadcaster.__CreateInstance(__ret);
        }

        public bool BroadcasterMatchesPtr(LLDB.Broadcaster broadcaster)
        {
            var arg0 = ReferenceEquals(broadcaster, null) ? global::System.IntPtr.Zero : broadcaster.__Instance;
            var __ret = Internal.BroadcasterMatchesPtr_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool BroadcasterMatchesRef(LLDB.Broadcaster broadcaster)
        {
            if (ReferenceEquals(broadcaster, null))
                throw new global::System.ArgumentNullException("broadcaster", "Cannot be null because it is a C++ reference (&).");
            var arg0 = broadcaster.__Instance;
            var __ret = Internal.BroadcasterMatchesRef_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public static string GetCStringFromEvent(LLDB.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.GetCStringFromEvent_0(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string DataFlavor
        {
            get
            {
                var __ret = Internal.GetDataFlavor_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint Type
        {
            get
            {
                var __ret = Internal.GetType_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public string BroadcasterClass
        {
            get
            {
                var __ret = Internal.GetBroadcasterClass_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }
}
