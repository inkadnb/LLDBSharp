//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class FileSpecList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecListC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecListC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecListD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb14SBFileSpecList14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecList6AppendERKNS_10SBFileSpecE")]
            internal static extern void Append_0(global::System.IntPtr instance, global::System.IntPtr sb_file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecList14AppendIfUniqueERKNS_10SBFileSpecE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AppendIfUnique_0(global::System.IntPtr instance, global::System.IntPtr sb_file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecList5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb14SBFileSpecList13FindFileIndexEjRKNS_10SBFileSpecEb")]
            internal static extern uint FindFileIndex_0(global::System.IntPtr instance, uint idx, global::System.IntPtr sb_file, bool full);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb14SBFileSpecList18GetFileSpecAtIndexEj")]
            internal static extern void GetFileSpecAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb14SBFileSpecList7GetSizeEv")]
            internal static extern uint GetSize_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSpecList> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSpecList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static FileSpecList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new FileSpecList(native.ToPointer(), skipVTables);
        }

        public static FileSpecList __CreateInstance(FileSpecList.Internal native, bool skipVTables = false)
        {
            return new FileSpecList(native, skipVTables);
        }

        private static void* __CopyValue(FileSpecList.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.FileSpecList.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private FileSpecList(FileSpecList.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FileSpecList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FileSpecList()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public FileSpecList(LLDB.FileSpecList rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.FileSpecList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Append(LLDB.FileSpec sb_file)
        {
            if (ReferenceEquals(sb_file, null))
                throw new global::System.ArgumentNullException("sb_file", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sb_file.__Instance;
            Internal.Append_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool AppendIfUnique(LLDB.FileSpec sb_file)
        {
            if (ReferenceEquals(sb_file, null))
                throw new global::System.ArgumentNullException("sb_file", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sb_file.__Instance;
            var __ret = Internal.AppendIfUnique_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public uint FindFileIndex(uint idx, LLDB.FileSpec sb_file, bool full)
        {
            if (ReferenceEquals(sb_file, null))
                throw new global::System.ArgumentNullException("sb_file", "Cannot be null because it is a C++ reference (&).");
            var arg1 = sb_file.__Instance;
            var __ret = Internal.FindFileIndex_0((__Instance + __PointerAdjustment), idx, arg1, full);
            return __ret;
        }

        public LLDB.FileSpec GetFileSpecAtIndex(uint idx)
        {
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetFileSpecAtIndex_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), idx);
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public uint Size
        {
            get
            {
                var __ret = Internal.GetSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
