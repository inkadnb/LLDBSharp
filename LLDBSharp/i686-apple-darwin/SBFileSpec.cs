//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class FileSpec : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpecC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpecC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpecC2EPKc")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpecC2EPKcb")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr path, bool resolve);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpecD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb10SBFileSpec7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb10SBFileSpec6ExistsEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Exists_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpec25ResolveExecutableLocationEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ResolveExecutableLocation_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb10SBFileSpec7GetPathEPcm")]
            internal static extern uint GetPath_0(global::System.IntPtr instance, sbyte* dst_path, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpec11ResolvePathEPKcPcm")]
            internal static extern int ResolvePath_0(global::System.IntPtr src_path, sbyte* dst_path, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb10SBFileSpec14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpec19AppendPathComponentEPKc")]
            internal static extern void AppendPathComponent_0(global::System.IntPtr instance, global::System.IntPtr file_or_directory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb10SBFileSpec11GetFilenameEv")]
            internal static extern global::System.IntPtr GetFilename_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpec11SetFilenameEPKc")]
            internal static extern void SetFilename_0(global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb10SBFileSpec12GetDirectoryEv")]
            internal static extern global::System.IntPtr GetDirectory_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb10SBFileSpec12SetDirectoryEPKc")]
            internal static extern void SetDirectory_0(global::System.IntPtr instance, global::System.IntPtr directory);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSpec> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSpec>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static FileSpec __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new FileSpec(native.ToPointer(), skipVTables);
        }

        public static FileSpec __CreateInstance(FileSpec.Internal native, bool skipVTables = false)
        {
            return new FileSpec(native, skipVTables);
        }

        private static void* __CopyValue(FileSpec.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.FileSpec.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private FileSpec(FileSpec.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FileSpec(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FileSpec()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public FileSpec(LLDB.FileSpec rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public FileSpec(string path)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public FileSpec(string path, bool resolve)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, resolve);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.FileSpec __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Exists()
        {
            var __ret = Internal.Exists_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ResolveExecutableLocation()
        {
            var __ret = Internal.ResolveExecutableLocation_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetPath(sbyte* dst_path, uint dst_len)
        {
            var arg0 = dst_path;
            var __ret = Internal.GetPath_0((__Instance + __PointerAdjustment), arg0, dst_len);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void AppendPathComponent(string file_or_directory)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file_or_directory);
            Internal.AppendPathComponent_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public static int ResolvePath(string src_path, sbyte* dst_path, uint dst_len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(src_path);
            var arg1 = dst_path;
            var __ret = Internal.ResolvePath_0(arg0, arg1, dst_len);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public string Filename
        {
            get
            {
                var __ret = Internal.GetFilename_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetFilename_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string Directory
        {
            get
            {
                var __ret = Internal.GetDirectory_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetDirectory_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }
    }
}
