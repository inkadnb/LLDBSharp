//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Frame : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrameC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrameC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrameD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame7IsEqualERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEqual_0(global::System.IntPtr instance, global::System.IntPtr that);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame5SetPCEy")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetPC_0(global::System.IntPtr instance, ulong new_pc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame12GetPCAddressEv")]
            internal static extern void GetPCAddress_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame16GetSymbolContextEj")]
            internal static extern void GetSymbolContext_0(global::System.IntPtr @return, global::System.IntPtr instance, uint resolve_scope);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame9GetModuleEv")]
            internal static extern void GetModule_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame14GetCompileUnitEv")]
            internal static extern void GetCompileUnit_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame11GetFunctionEv")]
            internal static extern void GetFunction_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame9GetSymbolEv")]
            internal static extern void GetSymbol_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame8GetBlockEv")]
            internal static extern void GetBlock_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame9IsInlinedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsInlined_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame18EvaluateExpressionEPKc")]
            internal static extern void EvaluateExpression_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr expr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame18EvaluateExpressionEPKcNS_16DynamicValueTypeE")]
            internal static extern void EvaluateExpression_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr expr, LLDB.DynamicValueType use_dynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame18EvaluateExpressionEPKcNS_16DynamicValueTypeEb")]
            internal static extern void EvaluateExpression_2(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr expr, LLDB.DynamicValueType use_dynamic, bool unwind_on_error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame18EvaluateExpressionEPKcRKNS_19SBExpressionOptionsE")]
            internal static extern void EvaluateExpression_3(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr expr, global::System.IntPtr options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame13GetFrameBlockEv")]
            internal static extern void GetFrameBlock_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame12GetLineEntryEv")]
            internal static extern void GetLineEntry_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame9GetThreadEv")]
            internal static extern void GetThread_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame11DisassembleEv")]
            internal static extern global::System.IntPtr Disassemble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrameeqERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrameneERKS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12GetVariablesEbbbb")]
            internal static extern void GetVariables_0(global::System.IntPtr @return, global::System.IntPtr instance, bool arguments, bool locals, bool statics, bool in_scope_only);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12GetVariablesEbbbbNS_16DynamicValueTypeE")]
            internal static extern void GetVariables_1(global::System.IntPtr @return, global::System.IntPtr instance, bool arguments, bool locals, bool statics, bool in_scope_only, LLDB.DynamicValueType use_dynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12GetVariablesERKNS_18SBVariablesOptionsE")]
            internal static extern void GetVariables_2(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12GetRegistersEv")]
            internal static extern void GetRegisters_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12FindRegisterEPKc")]
            internal static extern void FindRegister_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12FindVariableEPKc")]
            internal static extern void FindVariable_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr var_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame12FindVariableEPKcNS_16DynamicValueTypeE")]
            internal static extern void FindVariable_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr var_name, LLDB.DynamicValueType use_dynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame23GetValueForVariablePathEPKcNS_16DynamicValueTypeE")]
            internal static extern void GetValueForVariablePath_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr var_expr_cstr, LLDB.DynamicValueType use_dynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame23GetValueForVariablePathEPKc")]
            internal static extern void GetValueForVariablePath_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr var_path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame9FindValueEPKcNS_9ValueTypeE")]
            internal static extern void FindValue_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr name, LLDB.ValueType value_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame9FindValueEPKcNS_9ValueTypeENS_16DynamicValueTypeE")]
            internal static extern void FindValue_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr name, LLDB.ValueType value_type, LLDB.DynamicValueType use_dynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame10GetFrameIDEv")]
            internal static extern uint GetFrameID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame6GetCFAEv")]
            internal static extern ulong GetCFA_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame5GetPCEv")]
            internal static extern ulong GetPC_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame5GetSPEv")]
            internal static extern ulong GetSP_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb7SBFrame5GetFPEv")]
            internal static extern ulong GetFP_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame15GetFunctionNameEv")]
            internal static extern global::System.IntPtr GetFunctionName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb7SBFrame22GetDisplayFunctionNameEv")]
            internal static extern global::System.IntPtr GetDisplayFunctionName_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Frame> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Frame>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Frame __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Frame(native.ToPointer(), skipVTables);
        }

        public static Frame __CreateInstance(Frame.Internal native, bool skipVTables = false)
        {
            return new Frame(native, skipVTables);
        }

        private static void* __CopyValue(Frame.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.Frame.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Frame(Frame.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Frame(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Frame()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Frame(LLDB.Frame rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Frame __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsEqual(LLDB.Frame that)
        {
            if (ReferenceEquals(that, null))
                throw new global::System.ArgumentNullException("that", "Cannot be null because it is a C++ reference (&).");
            var arg0 = that.__Instance;
            var __ret = Internal.IsEqual_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool SetPC(ulong new_pc)
        {
            var __ret = Internal.SetPC_0((__Instance + __PointerAdjustment), new_pc);
            return __ret;
        }

        public LLDB.Address GetPCAddress()
        {
            var __ret = new LLDB.Address.Internal();
            Internal.GetPCAddress_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Address.__CreateInstance(__ret);
        }

        public LLDB.SymbolContext GetSymbolContext(uint resolve_scope)
        {
            var __ret = new LLDB.SymbolContext.Internal();
            Internal.GetSymbolContext_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), resolve_scope);
            return LLDB.SymbolContext.__CreateInstance(__ret);
        }

        public LLDB.Module GetModule()
        {
            var __ret = new LLDB.Module.Internal();
            Internal.GetModule_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Module.__CreateInstance(__ret);
        }

        public LLDB.CompileUnit GetCompileUnit()
        {
            var __ret = new LLDB.CompileUnit.Internal();
            Internal.GetCompileUnit_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.CompileUnit.__CreateInstance(__ret);
        }

        public LLDB.Function GetFunction()
        {
            var __ret = new LLDB.Function.Internal();
            Internal.GetFunction_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Function.__CreateInstance(__ret);
        }

        public LLDB.Symbol GetSymbol()
        {
            var __ret = new LLDB.Symbol.Internal();
            Internal.GetSymbol_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Symbol.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Gets the deepest block that contains the frame PC.</para>
        /// </summary>
        /// <remarks>
        /// <para>See also GetFrameBlock().</para>
        /// </remarks>
        public LLDB.Block GetBlock()
        {
            var __ret = new LLDB.Block.Internal();
            Internal.GetBlock_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Block.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Return true if this frame represents an inlined function.</para>
        /// </summary>
        /// <remarks>
        /// <para>See also GetFunctionName().</para>
        /// </remarks>
        public bool IsInlined()
        {
            var __ret = Internal.IsInlined_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        /// <summary>
        /// <para>The version that doesn't supply a 'use_dynamic' value will use the</para>
        /// <para>target's default.</para>
        /// </summary>
        public LLDB.Value EvaluateExpression(string expr)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(expr);
            var __ret = new LLDB.Value.Internal();
            Internal.EvaluateExpression_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public LLDB.Value EvaluateExpression(string expr, LLDB.DynamicValueType use_dynamic)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(expr);
            var arg1 = use_dynamic;
            var __ret = new LLDB.Value.Internal();
            Internal.EvaluateExpression_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public LLDB.Value EvaluateExpression(string expr, LLDB.DynamicValueType use_dynamic, bool unwind_on_error)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(expr);
            var arg1 = use_dynamic;
            var __ret = new LLDB.Value.Internal();
            Internal.EvaluateExpression_2(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1, unwind_on_error);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public LLDB.Value EvaluateExpression(string expr, LLDB.ExpressionOptions options)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(expr);
            if (ReferenceEquals(options, null))
                throw new global::System.ArgumentNullException("options", "Cannot be null because it is a C++ reference (&).");
            var arg1 = options.__Instance;
            var __ret = new LLDB.Value.Internal();
            Internal.EvaluateExpression_3(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Gets the lexical block that defines the stack frame. Another way to think</para>
        /// <para>of this is it will return the block that contains all of the variables</para>
        /// <para>for a stack frame. Inlined functions are represented as SBBlock objects</para>
        /// <para>that have inlined function information: the name of the inlined function,</para>
        /// <para>where it was called from. The block that is returned will be the first </para>
        /// <para>block at or above the block for the PC (SBFrame::GetBlock()) that defines</para>
        /// <para>the scope of the frame. When a function contains no inlined functions,</para>
        /// <para>this will be the top most lexical block that defines the function. </para>
        /// <para>When a function has inlined functions and the PC is currently</para>
        /// <para>in one of those inlined functions, this method will return the inlined</para>
        /// <para>block that defines this frame. If the PC isn't currently in an inlined</para>
        /// <para>function, the lexical block that defines the function is returned.</para>
        /// </summary>
        public LLDB.Block GetFrameBlock()
        {
            var __ret = new LLDB.Block.Internal();
            Internal.GetFrameBlock_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Block.__CreateInstance(__ret);
        }

        public LLDB.LineEntry GetLineEntry()
        {
            var __ret = new LLDB.LineEntry.Internal();
            Internal.GetLineEntry_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.LineEntry.__CreateInstance(__ret);
        }

        public LLDB.Thread GetThread()
        {
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThread_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public string Disassemble()
        {
            var __ret = Internal.Disassemble_0((__Instance + __PointerAdjustment));
            return Marshal.PtrToStringAnsi(__ret);
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public static bool operator ==(LLDB.Frame __op, LLDB.Frame rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Frame;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.Frame __op, LLDB.Frame rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        /// <summary>
        /// <para>The version that doesn't supply a 'use_dynamic' value will use the</para>
        /// <para>target's default.</para>
        /// </summary>
        public LLDB.ValueList GetVariables(bool arguments, bool locals, bool statics, bool in_scope_only)
        {
            var __ret = new LLDB.ValueList.Internal();
            Internal.GetVariables_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arguments, locals, statics, in_scope_only);
            return LLDB.ValueList.__CreateInstance(__ret);
        }

        public LLDB.ValueList GetVariables(bool arguments, bool locals, bool statics, bool in_scope_only, LLDB.DynamicValueType use_dynamic)
        {
            var arg4 = use_dynamic;
            var __ret = new LLDB.ValueList.Internal();
            Internal.GetVariables_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arguments, locals, statics, in_scope_only, arg4);
            return LLDB.ValueList.__CreateInstance(__ret);
        }

        public LLDB.ValueList GetVariables(LLDB.VariablesOptions options)
        {
            if (ReferenceEquals(options, null))
                throw new global::System.ArgumentNullException("options", "Cannot be null because it is a C++ reference (&).");
            var arg0 = options.__Instance;
            var __ret = new LLDB.ValueList.Internal();
            Internal.GetVariables_2(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return LLDB.ValueList.__CreateInstance(__ret);
        }

        public LLDB.ValueList GetRegisters()
        {
            var __ret = new LLDB.ValueList.Internal();
            Internal.GetRegisters_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return LLDB.ValueList.__CreateInstance(__ret);
        }

        public LLDB.Value FindRegister(string name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            var __ret = new LLDB.Value.Internal();
            Internal.FindRegister_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>The version that doesn't supply a 'use_dynamic' value will use the</para>
        /// <para>target's default.</para>
        /// </summary>
        public LLDB.Value FindVariable(string var_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(var_name);
            var __ret = new LLDB.Value.Internal();
            Internal.FindVariable_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public LLDB.Value FindVariable(string var_name, LLDB.DynamicValueType use_dynamic)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(var_name);
            var arg1 = use_dynamic;
            var __ret = new LLDB.Value.Internal();
            Internal.FindVariable_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public LLDB.Value GetValueForVariablePath(string var_expr_cstr, LLDB.DynamicValueType use_dynamic)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(var_expr_cstr);
            var arg1 = use_dynamic;
            var __ret = new LLDB.Value.Internal();
            Internal.GetValueForVariablePath_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>The version that doesn't supply a 'use_dynamic' value will use the</para>
        /// <para>target's default.</para>
        /// </summary>
        public LLDB.Value GetValueForVariablePath(string var_path)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(var_path);
            var __ret = new LLDB.Value.Internal();
            Internal.GetValueForVariablePath_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Find variables, register sets, registers, or persistent variables using</para>
        /// <para>the frame as the scope.</para>
        /// </summary>
        /// <remarks>
        /// <para>NB. This function does not look up ivars in the function object pointer.</para>
        /// <para>To do that use GetValueForVariablePath.</para>
        /// <para>The version that doesn't supply a 'use_dynamic' value will use the</para>
        /// <para>target's default.</para>
        /// </remarks>
        public LLDB.Value FindValue(string name, LLDB.ValueType value_type)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            var arg1 = value_type;
            var __ret = new LLDB.Value.Internal();
            Internal.FindValue_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public LLDB.Value FindValue(string name, LLDB.ValueType value_type, LLDB.DynamicValueType use_dynamic)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            var arg1 = value_type;
            var arg2 = use_dynamic;
            var __ret = new LLDB.Value.Internal();
            Internal.FindValue_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Value.__CreateInstance(__ret);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public uint FrameID
        {
            get
            {
                var __ret = Internal.GetFrameID_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong CFA
        {
            get
            {
                var __ret = Internal.GetCFA_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong PC
        {
            get
            {
                var __ret = Internal.GetPC_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong SP
        {
            get
            {
                var __ret = Internal.GetSP_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong FP
        {
            get
            {
                var __ret = Internal.GetFP_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public string FunctionName
        {
            get
            {
                var __ret = Internal.GetFunctionName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string DisplayFunctionName
        {
            get
            {
                var __ret = Internal.GetDisplayFunctionName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }
}
