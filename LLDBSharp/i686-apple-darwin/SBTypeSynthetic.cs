//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class TypeSynthetic : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSyntheticC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSyntheticC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSyntheticD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic19CreateWithClassNameEPKcj")]
            internal static extern void CreateWithClassName_0(global::System.IntPtr @return, global::System.IntPtr data, uint options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic20CreateWithScriptCodeEPKcj")]
            internal static extern void CreateWithScriptCode_0(global::System.IntPtr @return, global::System.IntPtr data, uint options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb15SBTypeSynthetic7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic11IsClassCodeEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsClassCode_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic11IsClassNameEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsClassName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic14GetDescriptionERNS_8SBStreamENS_16DescriptionLevelE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description, LLDB.DescriptionLevel description_level);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic9IsEqualToERS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEqualTo_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSyntheticeqERS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSyntheticneERS0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic16CopyOnWrite_ImplEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CopyOnWrite_Impl_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic7GetDataEv")]
            internal static extern global::System.IntPtr GetData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic12SetClassNameEPKc")]
            internal static extern void SetClassName_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic12SetClassCodeEPKc")]
            internal static extern void SetClassCode_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic10GetOptionsEv")]
            internal static extern uint GetOptions_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb15SBTypeSynthetic10SetOptionsEj")]
            internal static extern void SetOptions_0(global::System.IntPtr instance, uint _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeSynthetic> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeSynthetic>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static TypeSynthetic __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new TypeSynthetic(native.ToPointer(), skipVTables);
        }

        public static TypeSynthetic __CreateInstance(TypeSynthetic.Internal native, bool skipVTables = false)
        {
            return new TypeSynthetic(native, skipVTables);
        }

        private static void* __CopyValue(TypeSynthetic.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.TypeSynthetic.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private TypeSynthetic(TypeSynthetic.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeSynthetic(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeSynthetic()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public TypeSynthetic(LLDB.TypeSynthetic rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.TypeSynthetic __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsClassCode()
        {
            var __ret = Internal.IsClassCode_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsClassName()
        {
            var __ret = Internal.IsClassName_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description, LLDB.DescriptionLevel description_level)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var arg1 = description_level;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool IsEqualTo(LLDB.TypeSynthetic rhs)
        {
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            var __ret = Internal.IsEqualTo_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public static bool operator ==(LLDB.TypeSynthetic __op, LLDB.TypeSynthetic rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as TypeSynthetic;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.TypeSynthetic __op, LLDB.TypeSynthetic rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        protected bool CopyOnWrite_Impl()
        {
            var __ret = Internal.CopyOnWrite_Impl_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static LLDB.TypeSynthetic CreateWithClassName(string data, uint options)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(data);
            var __ret = new LLDB.TypeSynthetic.Internal();
            Internal.CreateWithClassName_0(new IntPtr(&__ret), arg0, options);
            Marshal.FreeHGlobal(arg0);
            return LLDB.TypeSynthetic.__CreateInstance(__ret);
        }

        public static LLDB.TypeSynthetic CreateWithScriptCode(string data, uint options)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(data);
            var __ret = new LLDB.TypeSynthetic.Internal();
            Internal.CreateWithScriptCode_0(new IntPtr(&__ret), arg0, options);
            Marshal.FreeHGlobal(arg0);
            return LLDB.TypeSynthetic.__CreateInstance(__ret);
        }

        public string Data
        {
            get
            {
                var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string ClassName
        {
            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetClassName_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string ClassCode
        {
            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetClassCode_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public uint Options
        {
            get
            {
                var __ret = Internal.GetOptions_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetOptions_0((__Instance + __PointerAdjustment), value);
            }
        }
    }
}
