//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Process : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcessC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcessC2ERKS0_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcessD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess9GetTargetEv")]
            internal static extern void GetTarget_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess8PutSTDINEPKcm")]
            internal static extern uint PutSTDIN_0(global::System.IntPtr instance, global::System.IntPtr src, uint src_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess9GetSTDOUTEPcm")]
            internal static extern uint GetSTDOUT_0(global::System.IntPtr instance, sbyte* dst, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess9GetSTDERREPcm")]
            internal static extern uint GetSTDERR_0(global::System.IntPtr instance, sbyte* dst, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess19GetAsyncProfileDataEPcm")]
            internal static extern uint GetAsyncProfileData_0(global::System.IntPtr instance, sbyte* dst, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess22AppendEventStateReportERKNS_7SBEventERNS_21SBCommandReturnObjectE")]
            internal static extern void AppendEventStateReport_0(global::System.IntPtr instance, global::System.IntPtr @event, global::System.IntPtr result);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess27RemoteAttachToProcessWithIDEyRNS_7SBErrorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RemoteAttachToProcessWithID_0(global::System.IntPtr instance, ulong pid, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess12RemoteLaunchEPPKcS3_S2_S2_S2_S2_jbRNS_7SBErrorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RemoteLaunch_0(global::System.IntPtr instance, sbyte** argv, sbyte** envp, global::System.IntPtr stdin_path, global::System.IntPtr stdout_path, global::System.IntPtr stderr_path, global::System.IntPtr working_directory, uint launch_flags, bool stop_at_entry, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess16GetThreadAtIndexEm")]
            internal static extern void GetThreadAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess13GetThreadByIDEy")]
            internal static extern void GetThreadByID_0(global::System.IntPtr @return, global::System.IntPtr instance, ulong sb_thread_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess18GetThreadByIndexIDEj")]
            internal static extern void GetThreadByIndexID_0(global::System.IntPtr @return, global::System.IntPtr instance, uint index_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess17GetSelectedThreadEv")]
            internal static extern void GetSelectedThread_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess20CreateOSPluginThreadEyy")]
            internal static extern void CreateOSPluginThread_0(global::System.IntPtr @return, global::System.IntPtr instance, ulong tid, ulong context);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess17SetSelectedThreadERKNS_8SBThreadE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetSelectedThread_0(global::System.IntPtr instance, global::System.IntPtr thread);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess21SetSelectedThreadByIDEy")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetSelectedThreadByID_0(global::System.IntPtr instance, ulong tid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess26SetSelectedThreadByIndexIDEj")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetSelectedThreadByIndexID_0(global::System.IntPtr instance, uint index_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess15GetQueueAtIndexEm")]
            internal static extern void GetQueueAtIndex_0(global::System.IntPtr @return, global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess7DestroyEv")]
            internal static extern void Destroy_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess8ContinueEv")]
            internal static extern void Continue_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess4StopEv")]
            internal static extern void Stop_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess4KillEv")]
            internal static extern void Kill_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess6DetachEv")]
            internal static extern void Detach_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess6DetachEb")]
            internal static extern void Detach_1(global::System.IntPtr @return, global::System.IntPtr instance, bool keep_stopped);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess6SignalEi")]
            internal static extern void Signal_0(global::System.IntPtr @return, global::System.IntPtr instance, int signal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess18SendAsyncInterruptEv")]
            internal static extern void SendAsyncInterrupt_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess9GetStopIDEb")]
            internal static extern uint GetStopID_0(global::System.IntPtr instance, bool include_expression_stops);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess21GetStopEventForStopIDEj")]
            internal static extern void GetStopEventForStopID_0(global::System.IntPtr @return, global::System.IntPtr instance, uint stop_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess10ReadMemoryEyPvmRNS_7SBErrorE")]
            internal static extern uint ReadMemory_0(global::System.IntPtr instance, ulong addr, global::System.IntPtr buf, uint size, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess11WriteMemoryEyPKvmRNS_7SBErrorE")]
            internal static extern uint WriteMemory_0(global::System.IntPtr instance, ulong addr, global::System.IntPtr buf, uint size, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess21ReadCStringFromMemoryEyPvmRNS_7SBErrorE")]
            internal static extern uint ReadCStringFromMemory_0(global::System.IntPtr instance, ulong addr, global::System.IntPtr buf, uint size, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess22ReadUnsignedFromMemoryEyjRNS_7SBErrorE")]
            internal static extern ulong ReadUnsignedFromMemory_0(global::System.IntPtr instance, ulong addr, uint byte_size, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess21ReadPointerFromMemoryEyRNS_7SBErrorE")]
            internal static extern ulong ReadPointerFromMemory_0(global::System.IntPtr instance, ulong addr, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess17GetStateFromEventERKNS_7SBEventE")]
            internal static extern LLDB.StateType GetStateFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess21GetRestartedFromEventERKNS_7SBEventE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetRestartedFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess31GetNumRestartedReasonsFromEventERKNS_7SBEventE")]
            internal static extern uint GetNumRestartedReasonsFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess34GetRestartedReasonAtIndexFromEventERKNS_7SBEventEm")]
            internal static extern global::System.IntPtr GetRestartedReasonAtIndexFromEvent_0(global::System.IntPtr @event, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess19GetProcessFromEventERKNS_7SBEventE")]
            internal static extern void GetProcessFromEvent_0(global::System.IntPtr @return, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess23GetInterruptedFromEventERKNS_7SBEventE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetInterruptedFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess19EventIsProcessEventERKNS_7SBEventE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EventIsProcessEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess14GetBroadcasterEv")]
            internal static extern void GetBroadcaster_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess14GetDescriptionERNS_8SBStreamE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess34GetNumSupportedHardwareWatchpointsERNS_7SBErrorE")]
            internal static extern uint GetNumSupportedHardwareWatchpoints_0(global::System.IntPtr instance, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess9LoadImageERNS_10SBFileSpecERNS_7SBErrorE")]
            internal static extern uint LoadImage_0(global::System.IntPtr instance, global::System.IntPtr image_spec, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess11UnloadImageEj")]
            internal static extern void UnloadImage_0(global::System.IntPtr @return, global::System.IntPtr instance, uint image_token);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess13SendEventDataEPKc")]
            internal static extern void SendEventData_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess31GetExtendedBacktraceTypeAtIndexEj")]
            internal static extern global::System.IntPtr GetExtendedBacktraceTypeAtIndex_0(global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess31IsInstrumentationRuntimePresentENS_26InstrumentationRuntimeTypeE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsInstrumentationRuntimePresent_0(global::System.IntPtr instance, LLDB.InstrumentationRuntimeType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess23GetBroadcasterClassNameEv")]
            internal static extern global::System.IntPtr GetBroadcasterClassName_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess13GetPluginNameEv")]
            internal static extern global::System.IntPtr GetPluginName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess18GetShortPluginNameEv")]
            internal static extern global::System.IntPtr GetShortPluginName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess12GetByteOrderEv")]
            internal static extern LLDB.ByteOrder GetByteOrder_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess13GetNumThreadsEv")]
            internal static extern uint GetNumThreads_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess12GetNumQueuesEv")]
            internal static extern uint GetNumQueues_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess8GetStateEv")]
            internal static extern LLDB.StateType GetState_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess13GetExitStatusEv")]
            internal static extern int GetExitStatus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess18GetExitDescriptionEv")]
            internal static extern global::System.IntPtr GetExitDescription_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess12GetProcessIDEv")]
            internal static extern ulong GetProcessID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess11GetUniqueIDEv")]
            internal static extern uint GetUniqueID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4lldb9SBProcess18GetAddressByteSizeEv")]
            internal static extern uint GetAddressByteSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess19GetBroadcasterClassEv")]
            internal static extern global::System.IntPtr GetBroadcasterClass_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb9SBProcess28GetNumExtendedBacktraceTypesEv")]
            internal static extern uint GetNumExtendedBacktraceTypes_0(global::System.IntPtr instance);
        }

        [Flags]
        public enum BroadcastBit : uint
        {
            BroadcastBitStateChanged = 1,
            BroadcastBitInterrupt = 2,
            BroadcastBitSTDOUT = 4,
            BroadcastBitSTDERR = 8,
            BroadcastBitProfileData = 16
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Process> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Process>();

        private readonly bool __ownsNativeInstance;

        public static Process __CreateInstance(global::System.IntPtr native)
        {
            return new Process((Process.Internal*) native);
        }

        public static Process __CreateInstance(Process.Internal native)
        {
            return new Process(native);
        }

        private static Process.Internal* __CopyValue(Process.Internal native)
        {
            var ret = (Process.Internal*) Marshal.AllocHGlobal(8);
            *ret = native;
            return ret;
        }

        private Process(Process.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Process(Process.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public Process()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.Process __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public LLDB.Target GetTarget()
        {
            var __ret = new LLDB.Target.Internal();
            Internal.GetTarget_0(new IntPtr(&__ret), __Instance);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public uint PutSTDIN(string src, uint src_len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(src);
            var arg1 = src_len;
            var __ret = Internal.PutSTDIN_0(__Instance, arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint GetSTDOUT(sbyte* dst, uint dst_len)
        {
            var arg0 = dst;
            var arg1 = dst_len;
            var __ret = Internal.GetSTDOUT_0(__Instance, arg0, arg1);
            return __ret;
        }

        public uint GetSTDERR(sbyte* dst, uint dst_len)
        {
            var arg0 = dst;
            var arg1 = dst_len;
            var __ret = Internal.GetSTDERR_0(__Instance, arg0, arg1);
            return __ret;
        }

        public uint GetAsyncProfileData(sbyte* dst, uint dst_len)
        {
            var arg0 = dst;
            var arg1 = dst_len;
            var __ret = Internal.GetAsyncProfileData_0(__Instance, arg0, arg1);
            return __ret;
        }

        public void AppendEventStateReport(LLDB.Event @event, LLDB.CommandReturnObject result)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var arg1 = ReferenceEquals(result, null) ? global::System.IntPtr.Zero : result.__Instance;
            Internal.AppendEventStateReport_0(__Instance, arg0, arg1);
        }

        /// <summary>
        /// <para>Remote connection related functions. These will fail if the
        /// process is not in eStateConnected. They are intended for use when
        /// connecting to an externally managed debugserver instance.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Remote connection related functions. These will fail if
        /// the</para>
        /// <para>    /// process is not in eStateConnected. They are intended for
        /// use</para>
        /// <para>    /// when connecting to an externally managed debugserver
        /// instance.</para>
        /// </remarks>
        public bool RemoteAttachToProcessWithID(ulong pid, LLDB.Error error)
        {
            var arg0 = pid;
            var arg1 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.RemoteAttachToProcessWithID_0(__Instance, arg0, arg1);
            return __ret;
        }

        public bool RemoteLaunch(sbyte** argv, sbyte** envp, string stdin_path, string stdout_path, string stderr_path, string working_directory, uint launch_flags, bool stop_at_entry, LLDB.Error error)
        {
            var arg0 = argv;
            var arg1 = envp;
            var arg2 = Marshal.StringToHGlobalAnsi(stdin_path);
            var arg3 = Marshal.StringToHGlobalAnsi(stdout_path);
            var arg4 = Marshal.StringToHGlobalAnsi(stderr_path);
            var arg5 = Marshal.StringToHGlobalAnsi(working_directory);
            var arg6 = launch_flags;
            var arg8 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.RemoteLaunch_0(__Instance, arg0, arg1, arg2, arg3, arg4, arg5, arg6, stop_at_entry, arg8);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            Marshal.FreeHGlobal(arg4);
            Marshal.FreeHGlobal(arg5);
            return __ret;
        }

        public LLDB.Thread GetThreadAtIndex(uint index)
        {
            var arg0 = index;
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThreadAtIndex_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public LLDB.Thread GetThreadByID(ulong sb_thread_id)
        {
            var arg0 = sb_thread_id;
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThreadByID_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public LLDB.Thread GetThreadByIndexID(uint index_id)
        {
            var arg0 = index_id;
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThreadByIndexID_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public LLDB.Thread GetSelectedThread()
        {
            var __ret = new LLDB.Thread.Internal();
            Internal.GetSelectedThread_0(new IntPtr(&__ret), __Instance);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public LLDB.Thread CreateOSPluginThread(ulong tid, ulong context)
        {
            var arg0 = tid;
            var arg1 = context;
            var __ret = new LLDB.Thread.Internal();
            Internal.CreateOSPluginThread_0(new IntPtr(&__ret), __Instance, arg0, arg1);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public bool SetSelectedThread(LLDB.Thread thread)
        {
            var arg0 = ReferenceEquals(thread, null) ? global::System.IntPtr.Zero : thread.__Instance;
            var __ret = Internal.SetSelectedThread_0(__Instance, arg0);
            return __ret;
        }

        public bool SetSelectedThreadByID(ulong tid)
        {
            var arg0 = tid;
            var __ret = Internal.SetSelectedThreadByID_0(__Instance, arg0);
            return __ret;
        }

        public bool SetSelectedThreadByIndexID(uint index_id)
        {
            var arg0 = index_id;
            var __ret = Internal.SetSelectedThreadByIndexID_0(__Instance, arg0);
            return __ret;
        }

        public LLDB.Queue GetQueueAtIndex(uint index)
        {
            var arg0 = index;
            var __ret = new LLDB.Queue.Internal();
            Internal.GetQueueAtIndex_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.Queue.__CreateInstance(__ret);
        }

        public LLDB.Error Destroy()
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Destroy_0(new IntPtr(&__ret), __Instance);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Continue()
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Continue_0(new IntPtr(&__ret), __Instance);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Stop()
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Stop_0(new IntPtr(&__ret), __Instance);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Kill()
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Kill_0(new IntPtr(&__ret), __Instance);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Detach()
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Detach_0(new IntPtr(&__ret), __Instance);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Detach(bool keep_stopped)
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Detach_1(new IntPtr(&__ret), __Instance, keep_stopped);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Signal(int signal)
        {
            var __ret = new LLDB.Error.Internal();
            Internal.Signal_0(new IntPtr(&__ret), __Instance, signal);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public void SendAsyncInterrupt()
        {
            Internal.SendAsyncInterrupt_0(__Instance);
        }

        public uint GetStopID(bool include_expression_stops)
        {
            var __ret = Internal.GetStopID_0(__Instance, include_expression_stops);
            return __ret;
        }

        /// <summary>
        /// <para>Note that it wasn't fully implemented and tracks only the stop
        /// event for the last natural stop ID.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Note that it wasn't fully implemented and tracks only the
        /// stop</para>
        /// <para>    /// event for the last natural stop ID.</para>
        /// <para>    ///</para>
        /// <para>    /// @param [in] stop_id</para>
        /// <para>    ///   The ID of the stop event to return.</para>
        /// <para>    ///</para>
        /// <para>    /// @return</para>
        /// <para>    ///   The stop event corresponding to stop ID.</para>
        /// </remarks>
        public LLDB.Event GetStopEventForStopID(uint stop_id)
        {
            var arg0 = stop_id;
            var __ret = new LLDB.Event.Internal();
            Internal.GetStopEventForStopID_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.Event.__CreateInstance(__ret);
        }

        public uint ReadMemory(ulong addr, global::System.IntPtr buf, uint size, LLDB.Error error)
        {
            var arg0 = addr;
            var arg1 = buf;
            var arg2 = size;
            var arg3 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.ReadMemory_0(__Instance, arg0, arg1, arg2, arg3);
            return __ret;
        }

        public uint WriteMemory(ulong addr, global::System.IntPtr buf, uint size, LLDB.Error error)
        {
            var arg0 = addr;
            var arg1 = buf;
            var arg2 = size;
            var arg3 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.WriteMemory_0(__Instance, arg0, arg1, arg2, arg3);
            return __ret;
        }

        public uint ReadCStringFromMemory(ulong addr, global::System.IntPtr buf, uint size, LLDB.Error error)
        {
            var arg0 = addr;
            var arg1 = buf;
            var arg2 = size;
            var arg3 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.ReadCStringFromMemory_0(__Instance, arg0, arg1, arg2, arg3);
            return __ret;
        }

        public ulong ReadUnsignedFromMemory(ulong addr, uint byte_size, LLDB.Error error)
        {
            var arg0 = addr;
            var arg1 = byte_size;
            var arg2 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.ReadUnsignedFromMemory_0(__Instance, arg0, arg1, arg2);
            return __ret;
        }

        public ulong ReadPointerFromMemory(ulong addr, LLDB.Error error)
        {
            var arg0 = addr;
            var arg1 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.ReadPointerFromMemory_0(__Instance, arg0, arg1);
            return __ret;
        }

        public LLDB.Broadcaster GetBroadcaster()
        {
            var __ret = new LLDB.Broadcaster.Internal();
            Internal.GetBroadcaster_0(new IntPtr(&__ret), __Instance);
            return LLDB.Broadcaster.__CreateInstance(__ret);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            var arg0 = ReferenceEquals(description, null) ? global::System.IntPtr.Zero : description.__Instance;
            var __ret = Internal.GetDescription_0(__Instance, arg0);
            return __ret;
        }

        public uint GetNumSupportedHardwareWatchpoints(LLDB.Error error)
        {
            var arg0 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.GetNumSupportedHardwareWatchpoints_0(__Instance, arg0);
            return __ret;
        }

        public uint LoadImage(LLDB.FileSpec image_spec, LLDB.Error error)
        {
            var arg0 = ReferenceEquals(image_spec, null) ? global::System.IntPtr.Zero : image_spec.__Instance;
            var arg1 = ReferenceEquals(error, null) ? global::System.IntPtr.Zero : error.__Instance;
            var __ret = Internal.LoadImage_0(__Instance, arg0, arg1);
            return __ret;
        }

        public LLDB.Error UnloadImage(uint image_token)
        {
            var arg0 = image_token;
            var __ret = new LLDB.Error.Internal();
            Internal.UnloadImage_0(new IntPtr(&__ret), __Instance, arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error SendEventData(string data)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(data);
            var __ret = new LLDB.Error.Internal();
            Internal.SendEventData_0(new IntPtr(&__ret), __Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Return the name of one of the thread-origin extended backtrace
        /// methods.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Return the name of one of the thread-origin extended
        /// backtrace </para>
        /// <para>    /// methods.</para>
        /// <para>    ///</para>
        /// <para>    /// @param [in] idx</para>
        /// <para>    ///   The index of the name to return.  They will be returned
        /// in</para>
        /// <para>    ///   the order that the user will most likely want to see
        /// them.</para>
        /// <para>    ///   e.g. if the type at index 0 is not available for a
        /// thread, </para>
        /// <para>    ///   see if the type at index 1 provides an extended
        /// backtrace.</para>
        /// <para>    ///</para>
        /// <para>    /// @return</para>
        /// <para>    ///   The name at that index.</para>
        /// </remarks>
        public string GetExtendedBacktraceTypeAtIndex(uint idx)
        {
            var arg0 = idx;
            var __ret = Internal.GetExtendedBacktraceTypeAtIndex_0(__Instance, arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public bool IsInstrumentationRuntimePresent(LLDB.InstrumentationRuntimeType type)
        {
            var arg0 = type;
            var __ret = Internal.IsInstrumentationRuntimePresent_0(__Instance, arg0);
            return __ret;
        }

        public static LLDB.StateType GetStateFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.GetStateFromEvent_0(arg0);
            return __ret;
        }

        public static bool GetRestartedFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.GetRestartedFromEvent_0(arg0);
            return __ret;
        }

        public static uint GetNumRestartedReasonsFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.GetNumRestartedReasonsFromEvent_0(arg0);
            return __ret;
        }

        public static string GetRestartedReasonAtIndexFromEvent(LLDB.Event @event, uint idx)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var arg1 = idx;
            var __ret = Internal.GetRestartedReasonAtIndexFromEvent_0(arg0, arg1);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static LLDB.Process GetProcessFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = new LLDB.Process.Internal();
            Internal.GetProcessFromEvent_0(new IntPtr(&__ret), arg0);
            return LLDB.Process.__CreateInstance(__ret);
        }

        public static bool GetInterruptedFromEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.GetInterruptedFromEvent_0(arg0);
            return __ret;
        }

        public static bool EventIsProcessEvent(LLDB.Event @event)
        {
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            var __ret = Internal.EventIsProcessEvent_0(arg0);
            return __ret;
        }

        public static string BroadcasterClassName
        {
            get
            {
                var __ret = Internal.GetBroadcasterClassName_0();
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string PluginName
        {
            get
            {
                var __ret = Internal.GetPluginName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string ShortPluginName
        {
            get
            {
                var __ret = Internal.GetShortPluginName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public LLDB.ByteOrder ByteOrder
        {
            get
            {
                var __ret = Internal.GetByteOrder_0(__Instance);
                return __ret;
            }
        }

        public uint NumThreads
        {
            get
            {
                var __ret = Internal.GetNumThreads_0(__Instance);
                return __ret;
            }
        }

        public uint NumQueues
        {
            get
            {
                var __ret = Internal.GetNumQueues_0(__Instance);
                return __ret;
            }
        }

        public LLDB.StateType State
        {
            get
            {
                var __ret = Internal.GetState_0(__Instance);
                return __ret;
            }
        }

        public int ExitStatus
        {
            get
            {
                var __ret = Internal.GetExitStatus_0(__Instance);
                return __ret;
            }
        }

        public string ExitDescription
        {
            get
            {
                var __ret = Internal.GetExitDescription_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public ulong ProcessID
        {
            get
            {
                var __ret = Internal.GetProcessID_0(__Instance);
                return __ret;
            }
        }

        public uint UniqueID
        {
            get
            {
                var __ret = Internal.GetUniqueID_0(__Instance);
                return __ret;
            }
        }

        public uint AddressByteSize
        {
            get
            {
                var __ret = Internal.GetAddressByteSize_0(__Instance);
                return __ret;
            }
        }

        public static string BroadcasterClass
        {
            get
            {
                var __ret = Internal.GetBroadcasterClass_0();
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint NumExtendedBacktraceTypes
        {
            get
            {
                var __ret = Internal.GetNumExtendedBacktraceTypes_0(__Instance);
                return __ret;
            }
        }
    }
}
