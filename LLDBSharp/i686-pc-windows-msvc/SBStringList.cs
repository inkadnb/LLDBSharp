//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class StringList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBStringList@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBStringList@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBStringList@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBStringList@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AppendString@SBStringList@lldb@@QAEXPBD@Z")]
            internal static extern void AppendString_0(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AppendList@SBStringList@lldb@@QAEXPAPBDH@Z")]
            internal static extern void AppendList_0(global::System.IntPtr instance, sbyte** strv, int strc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AppendList@SBStringList@lldb@@QAEXABV12@@Z")]
            internal static extern void AppendList_1(global::System.IntPtr instance, global::System.IntPtr strings);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetStringAtIndex@SBStringList@lldb@@QAEPBDI@Z")]
            internal static extern global::System.IntPtr GetStringAtIndex_0(global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBStringList@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSize@SBStringList@lldb@@QBEIXZ")]
            internal static extern uint GetSize_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, StringList> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, StringList>();

        private readonly bool __ownsNativeInstance;

        public static StringList __CreateInstance(global::System.IntPtr native)
        {
            return new StringList((StringList.Internal*) native);
        }

        public static StringList __CreateInstance(StringList.Internal native)
        {
            return new StringList(native);
        }

        private static StringList.Internal* __CopyValue(StringList.Internal native)
        {
            var ret = (StringList.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private StringList(StringList.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringList(StringList.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public StringList()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.StringList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public void AppendString(string str)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(str);
            Internal.AppendString_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public void AppendList(sbyte** strv, int strc)
        {
            var arg0 = strv;
            Internal.AppendList_0(__Instance, arg0, strc);
        }

        public void AppendList(LLDB.StringList strings)
        {
            var arg0 = ReferenceEquals(strings, null) ? global::System.IntPtr.Zero : strings.__Instance;
            Internal.AppendList_1(__Instance, arg0);
        }

        public string GetStringAtIndex(uint idx)
        {
            var arg0 = idx;
            var __ret = Internal.GetStringAtIndex_0(__Instance, arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public uint Size
        {
            get
            {
                var __ret = Internal.GetSize_0(__Instance);
                return __ret;
            }
        }
    }
}
