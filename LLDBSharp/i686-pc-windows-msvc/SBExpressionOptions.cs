//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class ExpressionOptions : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBExpressionOptions@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBExpressionOptions@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBExpressionOptions@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCancelCallback@SBExpressionOptions@lldb@@QAEXP6A_NW4ExpressionEvaluationPhase@2@PAX@Z1@Z")]
            internal static extern void SetCancelCallback_0(global::System.IntPtr instance, global::System.IntPtr callback, global::System.IntPtr baton);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCoerceResultToId@SBExpressionOptions@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetCoerceResultToId_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCoerceResultToId@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetCoerceResultToId_0(global::System.IntPtr instance, bool coerce);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetUnwindOnError@SBExpressionOptions@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetUnwindOnError_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetUnwindOnError@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetUnwindOnError_0(global::System.IntPtr instance, bool unwind);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetIgnoreBreakpoints@SBExpressionOptions@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetIgnoreBreakpoints_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetIgnoreBreakpoints@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetIgnoreBreakpoints_0(global::System.IntPtr instance, bool ignore);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFetchDynamicValue@SBExpressionOptions@lldb@@QBE?AW4DynamicValueType@2@XZ")]
            internal static extern LLDB.DynamicValueType GetFetchDynamicValue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetFetchDynamicValue@SBExpressionOptions@lldb@@QAEXW4DynamicValueType@2@@Z")]
            internal static extern void SetFetchDynamicValue_0(global::System.IntPtr instance, LLDB.DynamicValueType dynamic);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTimeoutInMicroSeconds@SBExpressionOptions@lldb@@QBEIXZ")]
            internal static extern uint GetTimeoutInMicroSeconds_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetTimeoutInMicroSeconds@SBExpressionOptions@lldb@@QAEXI@Z")]
            internal static extern void SetTimeoutInMicroSeconds_0(global::System.IntPtr instance, uint timeout);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOneThreadTimeoutInMicroSeconds@SBExpressionOptions@lldb@@QBEIXZ")]
            internal static extern uint GetOneThreadTimeoutInMicroSeconds_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetOneThreadTimeoutInMicroSeconds@SBExpressionOptions@lldb@@QAEXI@Z")]
            internal static extern void SetOneThreadTimeoutInMicroSeconds_0(global::System.IntPtr instance, uint timeout);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTryAllThreads@SBExpressionOptions@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetTryAllThreads_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetTryAllThreads@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetTryAllThreads_0(global::System.IntPtr instance, bool run_others);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetStopOthers@SBExpressionOptions@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetStopOthers_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetStopOthers@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetStopOthers_0(global::System.IntPtr instance, bool stop_others);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTrapExceptions@SBExpressionOptions@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetTrapExceptions_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetTrapExceptions@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetTrapExceptions_0(global::System.IntPtr instance, bool trap_exceptions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetLanguage@SBExpressionOptions@lldb@@QAEXW4LanguageType@2@@Z")]
            internal static extern void SetLanguage_0(global::System.IntPtr instance, LLDB.LanguageType language);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetGenerateDebugInfo@SBExpressionOptions@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetGenerateDebugInfo_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetGenerateDebugInfo@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetGenerateDebugInfo_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSuppressPersistentResult@SBExpressionOptions@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetSuppressPersistentResult_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetSuppressPersistentResult@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetSuppressPersistentResult_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPrefix@SBExpressionOptions@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetPrefix_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetPrefix@SBExpressionOptions@lldb@@QAEXPBD@Z")]
            internal static extern void SetPrefix_0(global::System.IntPtr instance, global::System.IntPtr prefix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAutoApplyFixIts@SBExpressionOptions@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetAutoApplyFixIts_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetAutoApplyFixIts@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetAutoApplyFixIts_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTopLevel@SBExpressionOptions@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetTopLevel_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetTopLevel@SBExpressionOptions@lldb@@QAEX_N@Z")]
            internal static extern void SetTopLevel_0(global::System.IntPtr instance, bool b);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ExpressionOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ExpressionOptions>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static ExpressionOptions __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new ExpressionOptions(native.ToPointer(), skipVTables);
        }

        public static ExpressionOptions __CreateInstance(ExpressionOptions.Internal native, bool skipVTables = false)
        {
            return new ExpressionOptions(native, skipVTables);
        }

        private static void* __CopyValue(ExpressionOptions.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.ExpressionOptions.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ExpressionOptions(ExpressionOptions.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ExpressionOptions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ExpressionOptions()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public ExpressionOptions(LLDB.ExpressionOptions rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.ExpressionOptions __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void SetCancelCallback(LLDB.ExpressionCancelCallback callback, global::System.IntPtr baton)
        {
            var arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var arg1 = baton;
            Internal.SetCancelCallback_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public bool CoerceResultToId
        {
            get
            {
                var __ret = Internal.GetCoerceResultToId_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetCoerceResultToId_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool UnwindOnError
        {
            get
            {
                var __ret = Internal.GetUnwindOnError_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetUnwindOnError_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool IgnoreBreakpoints
        {
            get
            {
                var __ret = Internal.GetIgnoreBreakpoints_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetIgnoreBreakpoints_0((__Instance + __PointerAdjustment), value);
            }
        }

        public LLDB.DynamicValueType FetchDynamicValue
        {
            get
            {
                var __ret = Internal.GetFetchDynamicValue_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetFetchDynamicValue_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public uint TimeoutInMicroSeconds
        {
            get
            {
                var __ret = Internal.GetTimeoutInMicroSeconds_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetTimeoutInMicroSeconds_0((__Instance + __PointerAdjustment), value);
            }
        }

        public uint OneThreadTimeoutInMicroSeconds
        {
            get
            {
                var __ret = Internal.GetOneThreadTimeoutInMicroSeconds_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetOneThreadTimeoutInMicroSeconds_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool TryAllThreads
        {
            get
            {
                var __ret = Internal.GetTryAllThreads_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetTryAllThreads_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool StopOthers
        {
            get
            {
                var __ret = Internal.GetStopOthers_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetStopOthers_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool TrapExceptions
        {
            get
            {
                var __ret = Internal.GetTrapExceptions_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetTrapExceptions_0((__Instance + __PointerAdjustment), value);
            }
        }

        public LLDB.LanguageType Language
        {
            set
            {
                var arg0 = value;
                Internal.SetLanguage_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public bool GenerateDebugInfo
        {
            get
            {
                var __ret = Internal.GetGenerateDebugInfo_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetGenerateDebugInfo_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool SuppressPersistentResult
        {
            get
            {
                var __ret = Internal.GetSuppressPersistentResult_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetSuppressPersistentResult_0((__Instance + __PointerAdjustment), value);
            }
        }

        public string Prefix
        {
            get
            {
                var __ret = Internal.GetPrefix_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetPrefix_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public bool AutoApplyFixIts
        {
            get
            {
                var __ret = Internal.GetAutoApplyFixIts_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetAutoApplyFixIts_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool TopLevel
        {
            get
            {
                var __ret = Internal.GetTopLevel_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetTopLevel_0((__Instance + __PointerAdjustment), value);
            }
        }
    }
}
