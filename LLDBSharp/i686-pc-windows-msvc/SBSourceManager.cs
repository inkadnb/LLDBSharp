//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class SourceManager : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSourceManager@lldb@@QAE@ABVSBDebugger@1@@Z")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::System.IntPtr debugger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSourceManager@lldb@@QAE@ABVSBTarget@1@@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSourceManager@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBSourceManager@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DisplaySourceLinesWithLineNumbers@SBSourceManager@lldb@@QAEIABVSBFileSpec@2@IIIPBDAAVSBStream@2@@Z")]
            internal static extern uint DisplaySourceLinesWithLineNumbers_0(global::System.IntPtr instance, global::System.IntPtr file, uint line, uint context_before, uint context_after, global::System.IntPtr current_line_cstr, global::System.IntPtr s);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SourceManager> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SourceManager>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static SourceManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new SourceManager(native.ToPointer(), skipVTables);
        }

        public static SourceManager __CreateInstance(SourceManager.Internal native, bool skipVTables = false)
        {
            return new SourceManager(native, skipVTables);
        }

        private static void* __CopyValue(SourceManager.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.SourceManager.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private SourceManager(SourceManager.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SourceManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SourceManager(LLDB.Debugger debugger)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(debugger, null))
                throw new global::System.ArgumentNullException("debugger", "Cannot be null because it is a C++ reference (&).");
            var arg0 = debugger.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public SourceManager(LLDB.Target target)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg0 = target.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public SourceManager(LLDB.SourceManager rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.SourceManager __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint DisplaySourceLinesWithLineNumbers(LLDB.FileSpec file, uint line, uint context_before, uint context_after, string current_line_cstr, LLDB.Stream s)
        {
            if (ReferenceEquals(file, null))
                throw new global::System.ArgumentNullException("file", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file.__Instance;
            var arg4 = Marshal.StringToHGlobalAnsi(current_line_cstr);
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg5 = s.__Instance;
            var __ret = Internal.DisplaySourceLinesWithLineNumbers_0((__Instance + __PointerAdjustment), arg0, line, context_before, context_after, arg4, arg5);
            Marshal.FreeHGlobal(arg4);
            return __ret;
        }
    }
}
