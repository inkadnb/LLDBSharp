//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class SourceManager : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSourceManager@lldb@@QAE@ABVSBDebugger@1@@Z")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::System.IntPtr debugger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSourceManager@lldb@@QAE@ABVSBTarget@1@@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSourceManager@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBSourceManager@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DisplaySourceLinesWithLineNumbers@SBSourceManager@lldb@@QAEIABVSBFileSpec@2@IIIPBDAAVSBStream@2@@Z")]
            internal static extern uint DisplaySourceLinesWithLineNumbers_0(global::System.IntPtr instance, global::System.IntPtr file, uint line, uint context_before, uint context_after, global::System.IntPtr current_line_cstr, global::System.IntPtr s);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SourceManager> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SourceManager>();

        private readonly bool __ownsNativeInstance;

        public static SourceManager __CreateInstance(global::System.IntPtr native)
        {
            return new SourceManager((SourceManager.Internal*) native);
        }

        public static SourceManager __CreateInstance(SourceManager.Internal native)
        {
            return new SourceManager(native);
        }

        private static SourceManager.Internal* __CopyValue(SourceManager.Internal native)
        {
            var ret = (SourceManager.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private SourceManager(SourceManager.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SourceManager(SourceManager.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public SourceManager(LLDB.Debugger debugger)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(debugger, null) ? global::System.IntPtr.Zero : debugger.__Instance;
            Internal.ctor_0(__Instance, arg0);
        }

        public SourceManager(LLDB.Target target)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(target, null) ? global::System.IntPtr.Zero : target.__Instance;
            Internal.ctor_1(__Instance, arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.SourceManager __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint DisplaySourceLinesWithLineNumbers(LLDB.FileSpec file, uint line, uint context_before, uint context_after, string current_line_cstr, LLDB.Stream s)
        {
            var arg0 = ReferenceEquals(file, null) ? global::System.IntPtr.Zero : file.__Instance;
            var arg1 = line;
            var arg2 = context_before;
            var arg3 = context_after;
            var arg4 = Marshal.StringToHGlobalAnsi(current_line_cstr);
            var arg5 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            var __ret = Internal.DisplaySourceLinesWithLineNumbers_0(__Instance, arg0, arg1, arg2, arg3, arg4, arg5);
            Marshal.FreeHGlobal(arg4);
            return __ret;
        }
    }
}
