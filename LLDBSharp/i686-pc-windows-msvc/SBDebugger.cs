//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class InputReader : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBInputReader@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Initialize@SBInputReader@lldb@@QAE?AVSBError@2@AAVSBDebugger@2@P6AKPAXPAV12@W4InputReaderAction@2@PBDK@Z1W4InputReaderGranularity@2@44_N@Z")]
            internal static extern void Initialize_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, LLDB.InputReaderGranularity _3, global::System.IntPtr _4, global::System.IntPtr _5, bool _6);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsActive@SBInputReader@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsActive_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetIsDone@SBInputReader@lldb@@QAEX_N@Z")]
            internal static extern void SetIsDone_0(global::System.IntPtr instance, bool _0);
        }

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate uint __AnonymousDelegate0(global::System.IntPtr _0, global::System.IntPtr _1, LLDB.InputReaderAction _2, global::System.IntPtr _3, uint _4);

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, InputReader> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, InputReader>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static InputReader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new InputReader(native.ToPointer(), skipVTables);
        }

        public static InputReader __CreateInstance(InputReader.Internal native, bool skipVTables = false)
        {
            return new InputReader(native, skipVTables);
        }

        private static void* __CopyValue(InputReader.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(InputReader.Internal*) ret = native;
            return ret.ToPointer();
        }

        private InputReader(InputReader.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InputReader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public InputReader()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public InputReader(LLDB.InputReader _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((InputReader.Internal*) __Instance) = *((InputReader.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.InputReader __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public LLDB.Error Initialize(LLDB.Debugger _0, LLDB.InputReader.__AnonymousDelegate0 _1, global::System.IntPtr _2, LLDB.InputReaderGranularity _3, string _4, string _5, bool _6)
        {
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            var arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            var arg2 = _2;
            var arg3 = _3;
            var arg4 = Marshal.StringToHGlobalAnsi(_4);
            var arg5 = Marshal.StringToHGlobalAnsi(_5);
            var __ret = new LLDB.Error.Internal();
            Internal.Initialize_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0, arg1, arg2, arg3, arg4, arg5, _6);
            Marshal.FreeHGlobal(arg4);
            Marshal.FreeHGlobal(arg5);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public bool IsActive()
        {
            var __ret = Internal.IsActive_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsDone
        {
            set
            {
                Internal.SetIsDone_0((__Instance + __PointerAdjustment), value);
            }
        }
    }

    public unsafe partial class Debugger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBDebugger@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBDebugger@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBDebugger@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Initialize@SBDebugger@lldb@@SAXXZ")]
            internal static extern void Initialize_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Terminate@SBDebugger@lldb@@SAXXZ")]
            internal static extern void Terminate_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create@SBDebugger@lldb@@SA?AV12@XZ")]
            internal static extern void Create_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create@SBDebugger@lldb@@SA?AV12@_N@Z")]
            internal static extern void Create_1(global::System.IntPtr @return, bool source_init_files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Create@SBDebugger@lldb@@SA?AV12@_NP6AXPBDPAX@Z2@Z")]
            internal static extern void Create_2(global::System.IntPtr @return, bool source_init_files, global::System.IntPtr log_callback, global::System.IntPtr baton);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Destroy@SBDebugger@lldb@@SAXAAV12@@Z")]
            internal static extern void Destroy_0(global::System.IntPtr debugger);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?MemoryPressureDetected@SBDebugger@lldb@@SAXXZ")]
            internal static extern void MemoryPressureDetected_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBDebugger@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBDebugger@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SkipLLDBInitFiles@SBDebugger@lldb@@QAEX_N@Z")]
            internal static extern void SkipLLDBInitFiles_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SkipAppInitFiles@SBDebugger@lldb@@QAEX_N@Z")]
            internal static extern void SkipAppInitFiles_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetInputFileHandle@SBDebugger@lldb@@QAEXPAU_iobuf@@_N@Z")]
            internal static extern void SetInputFileHandle_0(global::System.IntPtr instance, global::System.IntPtr f, bool transfer_ownership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetOutputFileHandle@SBDebugger@lldb@@QAEXPAU_iobuf@@_N@Z")]
            internal static extern void SetOutputFileHandle_0(global::System.IntPtr instance, global::System.IntPtr f, bool transfer_ownership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetErrorFileHandle@SBDebugger@lldb@@QAEXPAU_iobuf@@_N@Z")]
            internal static extern void SetErrorFileHandle_0(global::System.IntPtr instance, global::System.IntPtr f, bool transfer_ownership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SaveInputTerminalState@SBDebugger@lldb@@QAEXXZ")]
            internal static extern void SaveInputTerminalState_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RestoreInputTerminalState@SBDebugger@lldb@@QAEXXZ")]
            internal static extern void RestoreInputTerminalState_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCommandInterpreter@SBDebugger@lldb@@QAE?AVSBCommandInterpreter@2@XZ")]
            internal static extern void GetCommandInterpreter_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?HandleCommand@SBDebugger@lldb@@QAEXPBD@Z")]
            internal static extern void HandleCommand_0(global::System.IntPtr instance, global::System.IntPtr command);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetListener@SBDebugger@lldb@@QAE?AVSBListener@2@XZ")]
            internal static extern void GetListener_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?HandleProcessEvent@SBDebugger@lldb@@QAEXABVSBProcess@2@ABVSBEvent@2@PAU_iobuf@@2@Z")]
            internal static extern void HandleProcessEvent_0(global::System.IntPtr instance, global::System.IntPtr process, global::System.IntPtr @event, global::System.IntPtr @out, global::System.IntPtr err);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?CreateTarget@SBDebugger@lldb@@QAE?AVSBTarget@2@PBD00_NAAVSBError@2@@Z")]
            internal static extern void CreateTarget_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr filename, global::System.IntPtr target_triple, global::System.IntPtr platform_name, bool add_dependent_modules, global::System.IntPtr error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?CreateTargetWithFileAndTargetTriple@SBDebugger@lldb@@QAE?AVSBTarget@2@PBD0@Z")]
            internal static extern void CreateTargetWithFileAndTargetTriple_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr filename, global::System.IntPtr target_triple);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?CreateTargetWithFileAndArch@SBDebugger@lldb@@QAE?AVSBTarget@2@PBD0@Z")]
            internal static extern void CreateTargetWithFileAndArch_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr filename, global::System.IntPtr archname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?CreateTarget@SBDebugger@lldb@@QAE?AVSBTarget@2@PBD@Z")]
            internal static extern void CreateTarget_1(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DeleteTarget@SBDebugger@lldb@@QAE_NAAVSBTarget@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DeleteTarget_0(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTargetAtIndex@SBDebugger@lldb@@QAE?AVSBTarget@2@I@Z")]
            internal static extern void GetTargetAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetIndexOfTarget@SBDebugger@lldb@@QAEIVSBTarget@2@@Z")]
            internal static extern uint GetIndexOfTarget_0(global::System.IntPtr instance, LLDB.Target.Internal target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindTargetWithProcessID@SBDebugger@lldb@@QAE?AVSBTarget@2@_K@Z")]
            internal static extern void FindTargetWithProcessID_0(global::System.IntPtr instance, global::System.IntPtr @return, ulong pid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindTargetWithFileAndArch@SBDebugger@lldb@@QAE?AVSBTarget@2@PBD0@Z")]
            internal static extern void FindTargetWithFileAndArch_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr filename, global::System.IntPtr arch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSelectedTarget@SBDebugger@lldb@@QAE?AVSBTarget@2@XZ")]
            internal static extern void GetSelectedTarget_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSelectedPlatform@SBDebugger@lldb@@QAE?AVSBPlatform@2@XZ")]
            internal static extern void GetSelectedPlatform_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSourceManager@SBDebugger@lldb@@QAE?AVSBSourceManager@2@XZ")]
            internal static extern void GetSourceManager_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCurrentPlatform@SBDebugger@lldb@@QAE?AVSBError@2@PBD@Z")]
            internal static extern void SetCurrentPlatform_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr platform_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCurrentPlatformSDKRoot@SBDebugger@lldb@@QAE_NPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetCurrentPlatformSDKRoot_0(global::System.IntPtr instance, global::System.IntPtr sysroot);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetUseExternalEditor@SBDebugger@lldb@@QAE_N_N@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetUseExternalEditor_0(global::System.IntPtr instance, bool input);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetUseColor@SBDebugger@lldb@@QAE_N_N@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetUseColor_0(global::System.IntPtr instance, bool use_color);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetDefaultArchitecture@SBDebugger@lldb@@SA_NPADI@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDefaultArchitecture_0(sbyte* arch_name, uint arch_name_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetDefaultArchitecture@SBDebugger@lldb@@SA_NPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetDefaultArchitecture_0(global::System.IntPtr arch_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetScriptingLanguage@SBDebugger@lldb@@QAE?AW4ScriptLanguage@2@PBD@Z")]
            internal static extern LLDB.ScriptLanguage GetScriptingLanguage_0(global::System.IntPtr instance, global::System.IntPtr script_language_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StateAsCString@SBDebugger@lldb@@SAPBDW4StateType@2@@Z")]
            internal static extern global::System.IntPtr StateAsCString_0(LLDB.StateType state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StateIsRunningState@SBDebugger@lldb@@SA_NW4StateType@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool StateIsRunningState_0(LLDB.StateType state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?StateIsStoppedState@SBDebugger@lldb@@SA_NW4StateType@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool StateIsStoppedState_0(LLDB.StateType state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?EnableLog@SBDebugger@lldb@@QAE_NPBDPAPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EnableLog_0(global::System.IntPtr instance, global::System.IntPtr channel, sbyte** categories);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetLoggingCallback@SBDebugger@lldb@@QAEXP6AXPBDPAX@Z1@Z")]
            internal static extern void SetLoggingCallback_0(global::System.IntPtr instance, global::System.IntPtr log_callback, global::System.IntPtr baton);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DispatchInput@SBDebugger@lldb@@QAEXPAXPBXI@Z")]
            internal static extern void DispatchInput_0(global::System.IntPtr instance, global::System.IntPtr baton, global::System.IntPtr data, uint data_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DispatchInput@SBDebugger@lldb@@QAEXPBXI@Z")]
            internal static extern void DispatchInput_1(global::System.IntPtr instance, global::System.IntPtr data, uint data_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DispatchInputInterrupt@SBDebugger@lldb@@QAEXXZ")]
            internal static extern void DispatchInputInterrupt_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DispatchInputEndOfFile@SBDebugger@lldb@@QAEXXZ")]
            internal static extern void DispatchInputEndOfFile_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?PushInputReader@SBDebugger@lldb@@QAEXAAVSBInputReader@2@@Z")]
            internal static extern void PushInputReader_0(global::System.IntPtr instance, global::System.IntPtr reader);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FindDebuggerWithID@SBDebugger@lldb@@SA?AV12@H@Z")]
            internal static extern void FindDebuggerWithID_0(global::System.IntPtr @return, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetInternalVariable@SBDebugger@lldb@@SA?AVSBError@2@PBD00@Z")]
            internal static extern void SetInternalVariable_0(global::System.IntPtr @return, global::System.IntPtr var_name, global::System.IntPtr value, global::System.IntPtr debugger_instance_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetInternalVariableValue@SBDebugger@lldb@@SA?AVSBStringList@2@PBD0@Z")]
            internal static extern void GetInternalVariableValue_0(global::System.IntPtr @return, global::System.IntPtr var_name, global::System.IntPtr debugger_instance_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBDebugger@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCategory@SBDebugger@lldb@@QAE?AVSBTypeCategory@2@PBD@Z")]
            internal static extern void GetCategory_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr category_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCategory@SBDebugger@lldb@@QAE?AVSBTypeCategory@2@W4LanguageType@2@@Z")]
            internal static extern void GetCategory_1(global::System.IntPtr instance, global::System.IntPtr @return, LLDB.LanguageType lang_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?CreateCategory@SBDebugger@lldb@@QAE?AVSBTypeCategory@2@PBD@Z")]
            internal static extern void CreateCategory_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr category_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DeleteCategory@SBDebugger@lldb@@QAE_NPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DeleteCategory_0(global::System.IntPtr instance, global::System.IntPtr category_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCategoryAtIndex@SBDebugger@lldb@@QAE?AVSBTypeCategory@2@I@Z")]
            internal static extern void GetCategoryAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDefaultCategory@SBDebugger@lldb@@QAE?AVSBTypeCategory@2@XZ")]
            internal static extern void GetDefaultCategory_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFormatForType@SBDebugger@lldb@@QAE?AVSBTypeFormat@2@VSBTypeNameSpecifier@2@@Z")]
            internal static extern LLDB.TypeFormat.Internal GetFormatForType_0(global::System.IntPtr instance, LLDB.TypeNameSpecifier.Internal _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSummaryForType@SBDebugger@lldb@@QAE?AVSBTypeSummary@2@VSBTypeNameSpecifier@2@@Z")]
            internal static extern LLDB.TypeSummary.Internal GetSummaryForType_0(global::System.IntPtr instance, LLDB.TypeNameSpecifier.Internal _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFilterForType@SBDebugger@lldb@@QAE?AVSBTypeFilter@2@VSBTypeNameSpecifier@2@@Z")]
            internal static extern LLDB.TypeFilter.Internal GetFilterForType_0(global::System.IntPtr instance, LLDB.TypeNameSpecifier.Internal _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSyntheticForType@SBDebugger@lldb@@QAE?AVSBTypeSynthetic@2@VSBTypeNameSpecifier@2@@Z")]
            internal static extern LLDB.TypeSynthetic.Internal GetSyntheticForType_0(global::System.IntPtr instance, LLDB.TypeNameSpecifier.Internal _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RunCommandInterpreter@SBDebugger@lldb@@QAEX_N0@Z")]
            internal static extern void RunCommandInterpreter_0(global::System.IntPtr instance, bool auto_handle_events, bool spawn_thread);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RunCommandInterpreter@SBDebugger@lldb@@QAEX_N0AAVSBCommandInterpreterRunOptions@2@AAHAA_N3@Z")]
            internal static extern void RunCommandInterpreter_1(global::System.IntPtr instance, bool auto_handle_events, bool spawn_thread, global::System.IntPtr options, int* num_errors, bool* quit_requested, bool* stopped_for_crash);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RunREPL@SBDebugger@lldb@@QAE?AVSBError@2@W4LanguageType@2@PBD@Z")]
            internal static extern void RunREPL_0(global::System.IntPtr instance, global::System.IntPtr @return, LLDB.LanguageType language, global::System.IntPtr repl_options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAsync@SBDebugger@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetAsync_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetAsync@SBDebugger@lldb@@QAEX_N@Z")]
            internal static extern void SetAsync_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetInputFileHandle@SBDebugger@lldb@@QAEPAU_iobuf@@XZ")]
            internal static extern global::System.IntPtr GetInputFileHandle_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOutputFileHandle@SBDebugger@lldb@@QAEPAU_iobuf@@XZ")]
            internal static extern global::System.IntPtr GetOutputFileHandle_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetErrorFileHandle@SBDebugger@lldb@@QAEPAU_iobuf@@XZ")]
            internal static extern global::System.IntPtr GetErrorFileHandle_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumTargets@SBDebugger@lldb@@QAEIXZ")]
            internal static extern uint GetNumTargets_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetSelectedTarget@SBDebugger@lldb@@QAEXAAVSBTarget@2@@Z")]
            internal static extern void SetSelectedTarget_0(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetSelectedPlatform@SBDebugger@lldb@@QAEXAAVSBPlatform@2@@Z")]
            internal static extern void SetSelectedPlatform_0(global::System.IntPtr instance, global::System.IntPtr platform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetUseExternalEditor@SBDebugger@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetUseExternalEditor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetUseColor@SBDebugger@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetUseColor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetVersionString@SBDebugger@lldb@@SAPBDXZ")]
            internal static extern global::System.IntPtr GetVersionString_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetInstanceName@SBDebugger@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetInstanceName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTerminalWidth@SBDebugger@lldb@@QBEIXZ")]
            internal static extern uint GetTerminalWidth_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetTerminalWidth@SBDebugger@lldb@@QAEXI@Z")]
            internal static extern void SetTerminalWidth_0(global::System.IntPtr instance, uint term_width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetID@SBDebugger@lldb@@QAE_KXZ")]
            internal static extern ulong GetID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPrompt@SBDebugger@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetPrompt_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetPrompt@SBDebugger@lldb@@QAEXPBD@Z")]
            internal static extern void SetPrompt_0(global::System.IntPtr instance, global::System.IntPtr prompt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetScriptLanguage@SBDebugger@lldb@@QBE?AW4ScriptLanguage@2@XZ")]
            internal static extern LLDB.ScriptLanguage GetScriptLanguage_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetScriptLanguage@SBDebugger@lldb@@QAEXW4ScriptLanguage@2@@Z")]
            internal static extern void SetScriptLanguage_0(global::System.IntPtr instance, LLDB.ScriptLanguage script_lang);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCloseInputOnEOF@SBDebugger@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetCloseInputOnEOF_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCloseInputOnEOF@SBDebugger@lldb@@QAEX_N@Z")]
            internal static extern void SetCloseInputOnEOF_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumCategories@SBDebugger@lldb@@QAEIXZ")]
            internal static extern uint GetNumCategories_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Debugger> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Debugger>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Debugger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Debugger(native.ToPointer(), skipVTables);
        }

        public static Debugger __CreateInstance(Debugger.Internal native, bool skipVTables = false)
        {
            return new Debugger(native, skipVTables);
        }

        private static void* __CopyValue(Debugger.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.Debugger.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Debugger(Debugger.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Debugger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Debugger()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Debugger(LLDB.Debugger rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Debugger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void SkipLLDBInitFiles(bool b)
        {
            Internal.SkipLLDBInitFiles_0((__Instance + __PointerAdjustment), b);
        }

        public void SkipAppInitFiles(bool b)
        {
            Internal.SkipAppInitFiles_0((__Instance + __PointerAdjustment), b);
        }

        public void SetInputFileHandle(global::System.IntPtr f, bool transfer_ownership)
        {
            var arg0 = f;
            Internal.SetInputFileHandle_0((__Instance + __PointerAdjustment), arg0, transfer_ownership);
        }

        public void SetOutputFileHandle(global::System.IntPtr f, bool transfer_ownership)
        {
            var arg0 = f;
            Internal.SetOutputFileHandle_0((__Instance + __PointerAdjustment), arg0, transfer_ownership);
        }

        public void SetErrorFileHandle(global::System.IntPtr f, bool transfer_ownership)
        {
            var arg0 = f;
            Internal.SetErrorFileHandle_0((__Instance + __PointerAdjustment), arg0, transfer_ownership);
        }

        public void SaveInputTerminalState()
        {
            Internal.SaveInputTerminalState_0((__Instance + __PointerAdjustment));
        }

        public void RestoreInputTerminalState()
        {
            Internal.RestoreInputTerminalState_0((__Instance + __PointerAdjustment));
        }

        public LLDB.CommandInterpreter GetCommandInterpreter()
        {
            var __ret = new LLDB.CommandInterpreter.Internal();
            Internal.GetCommandInterpreter_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.CommandInterpreter.__CreateInstance(__ret);
        }

        public void HandleCommand(string command)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(command);
            Internal.HandleCommand_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public LLDB.Listener GetListener()
        {
            var __ret = new LLDB.Listener.Internal();
            Internal.GetListener_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Listener.__CreateInstance(__ret);
        }

        public void HandleProcessEvent(LLDB.Process process, LLDB.Event @event, global::System.IntPtr @out, global::System.IntPtr err)
        {
            if (ReferenceEquals(process, null))
                throw new global::System.ArgumentNullException("process", "Cannot be null because it is a C++ reference (&).");
            var arg0 = process.__Instance;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg1 = @event.__Instance;
            var arg2 = @out;
            var arg3 = err;
            Internal.HandleProcessEvent_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
        }

        public LLDB.Target CreateTarget(string filename, string target_triple, string platform_name, bool add_dependent_modules, LLDB.Error error)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(filename);
            var arg1 = Marshal.StringToHGlobalAnsi(target_triple);
            var arg2 = Marshal.StringToHGlobalAnsi(platform_name);
            if (ReferenceEquals(error, null))
                throw new global::System.ArgumentNullException("error", "Cannot be null because it is a C++ reference (&).");
            var arg4 = error.__Instance;
            var __ret = new LLDB.Target.Internal();
            Internal.CreateTarget_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0, arg1, arg2, add_dependent_modules, arg4);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public LLDB.Target CreateTargetWithFileAndTargetTriple(string filename, string target_triple)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(filename);
            var arg1 = Marshal.StringToHGlobalAnsi(target_triple);
            var __ret = new LLDB.Target.Internal();
            Internal.CreateTargetWithFileAndTargetTriple_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public LLDB.Target CreateTargetWithFileAndArch(string filename, string archname)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(filename);
            var arg1 = Marshal.StringToHGlobalAnsi(archname);
            var __ret = new LLDB.Target.Internal();
            Internal.CreateTargetWithFileAndArch_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public LLDB.Target CreateTarget(string filename)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(filename);
            var __ret = new LLDB.Target.Internal();
            Internal.CreateTarget_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public bool DeleteTarget(LLDB.Target target)
        {
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg0 = target.__Instance;
            var __ret = Internal.DeleteTarget_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public LLDB.Target GetTargetAtIndex(uint idx)
        {
            var __ret = new LLDB.Target.Internal();
            Internal.GetTargetAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public uint GetIndexOfTarget(LLDB.Target target)
        {
            var arg0 = ReferenceEquals(target, null) ? new LLDB.Target.Internal() : *(LLDB.Target.Internal*) (target.__Instance);
            var __ret = Internal.GetIndexOfTarget_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public LLDB.Target FindTargetWithProcessID(ulong pid)
        {
            var __ret = new LLDB.Target.Internal();
            Internal.FindTargetWithProcessID_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), pid);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public LLDB.Target FindTargetWithFileAndArch(string filename, string arch)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(filename);
            var arg1 = Marshal.StringToHGlobalAnsi(arch);
            var __ret = new LLDB.Target.Internal();
            Internal.FindTargetWithFileAndArch_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            return LLDB.Target.__CreateInstance(__ret);
        }

        public LLDB.Target GetSelectedTarget()
        {
            var __ret = new LLDB.Target.Internal();
            Internal.GetSelectedTarget_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Target.__CreateInstance(__ret);
        }

        public LLDB.Platform GetSelectedPlatform()
        {
            var __ret = new LLDB.Platform.Internal();
            Internal.GetSelectedPlatform_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Platform.__CreateInstance(__ret);
        }

        public LLDB.SourceManager GetSourceManager()
        {
            var __ret = new LLDB.SourceManager.Internal();
            Internal.GetSourceManager_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.SourceManager.__CreateInstance(__ret);
        }

        public LLDB.Error SetCurrentPlatform(string platform_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(platform_name);
            var __ret = new LLDB.Error.Internal();
            Internal.SetCurrentPlatform_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public bool SetCurrentPlatformSDKRoot(string sysroot)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sysroot);
            var __ret = Internal.SetCurrentPlatformSDKRoot_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public bool SetUseExternalEditor(bool input)
        {
            var __ret = Internal.SetUseExternalEditor_0((__Instance + __PointerAdjustment), input);
            return __ret;
        }

        public bool SetUseColor(bool use_color)
        {
            var __ret = Internal.SetUseColor_0((__Instance + __PointerAdjustment), use_color);
            return __ret;
        }

        public LLDB.ScriptLanguage GetScriptingLanguage(string script_language_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(script_language_name);
            var __ret = Internal.GetScriptingLanguage_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public bool EnableLog(string channel, sbyte** categories)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(channel);
            var arg1 = categories;
            var __ret = Internal.EnableLog_0((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public void SetLoggingCallback(LLDB.LogOutputCallback log_callback, global::System.IntPtr baton)
        {
            var arg0 = log_callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(log_callback);
            var arg1 = baton;
            Internal.SetLoggingCallback_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void DispatchInput(global::System.IntPtr baton, global::System.IntPtr data, uint data_len)
        {
            var arg0 = baton;
            var arg1 = data;
            Internal.DispatchInput_0((__Instance + __PointerAdjustment), arg0, arg1, data_len);
        }

        public void DispatchInput(global::System.IntPtr data, uint data_len)
        {
            var arg0 = data;
            Internal.DispatchInput_1((__Instance + __PointerAdjustment), arg0, data_len);
        }

        public void DispatchInputInterrupt()
        {
            Internal.DispatchInputInterrupt_0((__Instance + __PointerAdjustment));
        }

        public void DispatchInputEndOfFile()
        {
            Internal.DispatchInputEndOfFile_0((__Instance + __PointerAdjustment));
        }

        public void PushInputReader(LLDB.InputReader reader)
        {
            if (ReferenceEquals(reader, null))
                throw new global::System.ArgumentNullException("reader", "Cannot be null because it is a C++ reference (&).");
            var arg0 = reader.__Instance;
            Internal.PushInputReader_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public LLDB.TypeCategory GetCategory(string category_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(category_name);
            var __ret = new LLDB.TypeCategory.Internal();
            Internal.GetCategory_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.TypeCategory.__CreateInstance(__ret);
        }

        public LLDB.TypeCategory GetCategory(LLDB.LanguageType lang_type)
        {
            var arg0 = lang_type;
            var __ret = new LLDB.TypeCategory.Internal();
            Internal.GetCategory_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            return LLDB.TypeCategory.__CreateInstance(__ret);
        }

        public LLDB.TypeCategory CreateCategory(string category_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(category_name);
            var __ret = new LLDB.TypeCategory.Internal();
            Internal.CreateCategory_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.TypeCategory.__CreateInstance(__ret);
        }

        public bool DeleteCategory(string category_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(category_name);
            var __ret = Internal.DeleteCategory_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public LLDB.TypeCategory GetCategoryAtIndex(uint _0)
        {
            var __ret = new LLDB.TypeCategory.Internal();
            Internal.GetCategoryAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), _0);
            return LLDB.TypeCategory.__CreateInstance(__ret);
        }

        public LLDB.TypeCategory GetDefaultCategory()
        {
            var __ret = new LLDB.TypeCategory.Internal();
            Internal.GetDefaultCategory_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.TypeCategory.__CreateInstance(__ret);
        }

        public LLDB.TypeFormat GetFormatForType(LLDB.TypeNameSpecifier _0)
        {
            var arg0 = ReferenceEquals(_0, null) ? new LLDB.TypeNameSpecifier.Internal() : *(LLDB.TypeNameSpecifier.Internal*) (_0.__Instance);
            var __ret = Internal.GetFormatForType_0((__Instance + __PointerAdjustment), arg0);
            return LLDB.TypeFormat.__CreateInstance(__ret);
        }

        public LLDB.TypeSummary GetSummaryForType(LLDB.TypeNameSpecifier _0)
        {
            var arg0 = ReferenceEquals(_0, null) ? new LLDB.TypeNameSpecifier.Internal() : *(LLDB.TypeNameSpecifier.Internal*) (_0.__Instance);
            var __ret = Internal.GetSummaryForType_0((__Instance + __PointerAdjustment), arg0);
            return LLDB.TypeSummary.__CreateInstance(__ret);
        }

        public LLDB.TypeFilter GetFilterForType(LLDB.TypeNameSpecifier _0)
        {
            var arg0 = ReferenceEquals(_0, null) ? new LLDB.TypeNameSpecifier.Internal() : *(LLDB.TypeNameSpecifier.Internal*) (_0.__Instance);
            var __ret = Internal.GetFilterForType_0((__Instance + __PointerAdjustment), arg0);
            return LLDB.TypeFilter.__CreateInstance(__ret);
        }

        public LLDB.TypeSynthetic GetSyntheticForType(LLDB.TypeNameSpecifier _0)
        {
            var arg0 = ReferenceEquals(_0, null) ? new LLDB.TypeNameSpecifier.Internal() : *(LLDB.TypeNameSpecifier.Internal*) (_0.__Instance);
            var __ret = Internal.GetSyntheticForType_0((__Instance + __PointerAdjustment), arg0);
            return LLDB.TypeSynthetic.__CreateInstance(__ret);
        }

        public void RunCommandInterpreter(bool auto_handle_events, bool spawn_thread)
        {
            Internal.RunCommandInterpreter_0((__Instance + __PointerAdjustment), auto_handle_events, spawn_thread);
        }

        public void RunCommandInterpreter(bool auto_handle_events, bool spawn_thread, LLDB.CommandInterpreterRunOptions options, ref int num_errors, ref bool quit_requested, ref bool stopped_for_crash)
        {
            if (ReferenceEquals(options, null))
                throw new global::System.ArgumentNullException("options", "Cannot be null because it is a C++ reference (&).");
            var arg2 = options.__Instance;
            fixed (int* __refParamPtr3 = &num_errors)
            {
                var arg3 = __refParamPtr3;
                fixed (bool* __refParamPtr4 = &quit_requested)
                {
                    var arg4 = __refParamPtr4;
                    fixed (bool* __refParamPtr5 = &stopped_for_crash)
                    {
                        var arg5 = __refParamPtr5;
                        Internal.RunCommandInterpreter_1((__Instance + __PointerAdjustment), auto_handle_events, spawn_thread, arg2, arg3, arg4, arg5);
                    }
                }
            }
        }

        public LLDB.Error RunREPL(LLDB.LanguageType language, string repl_options)
        {
            var arg0 = language;
            var arg1 = Marshal.StringToHGlobalAnsi(repl_options);
            var __ret = new LLDB.Error.Internal();
            Internal.RunREPL_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public static void Initialize()
        {
            Internal.Initialize_0();
        }

        public static void Terminate()
        {
            Internal.Terminate_0();
        }

        public static LLDB.Debugger Create()
        {
            var __ret = new LLDB.Debugger.Internal();
            Internal.Create_0(new IntPtr(&__ret));
            return LLDB.Debugger.__CreateInstance(__ret);
        }

        public static LLDB.Debugger Create(bool source_init_files)
        {
            var __ret = new LLDB.Debugger.Internal();
            Internal.Create_1(new IntPtr(&__ret), source_init_files);
            return LLDB.Debugger.__CreateInstance(__ret);
        }

        public static LLDB.Debugger Create(bool source_init_files, LLDB.LogOutputCallback log_callback, global::System.IntPtr baton)
        {
            var arg1 = log_callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(log_callback);
            var arg2 = baton;
            var __ret = new LLDB.Debugger.Internal();
            Internal.Create_2(new IntPtr(&__ret), source_init_files, arg1, arg2);
            return LLDB.Debugger.__CreateInstance(__ret);
        }

        public static void Destroy(LLDB.Debugger debugger)
        {
            if (ReferenceEquals(debugger, null))
                throw new global::System.ArgumentNullException("debugger", "Cannot be null because it is a C++ reference (&).");
            var arg0 = debugger.__Instance;
            Internal.Destroy_0(arg0);
        }

        public static void MemoryPressureDetected()
        {
            Internal.MemoryPressureDetected_0();
        }

        public static bool GetDefaultArchitecture(sbyte* arch_name, uint arch_name_len)
        {
            var arg0 = arch_name;
            var __ret = Internal.GetDefaultArchitecture_0(arg0, arch_name_len);
            return __ret;
        }

        public static bool SetDefaultArchitecture(string arch_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(arch_name);
            var __ret = Internal.SetDefaultArchitecture_0(arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static string StateAsCString(LLDB.StateType state)
        {
            var arg0 = state;
            var __ret = Internal.StateAsCString_0(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static bool StateIsRunningState(LLDB.StateType state)
        {
            var arg0 = state;
            var __ret = Internal.StateIsRunningState_0(arg0);
            return __ret;
        }

        public static bool StateIsStoppedState(LLDB.StateType state)
        {
            var arg0 = state;
            var __ret = Internal.StateIsStoppedState_0(arg0);
            return __ret;
        }

        public static LLDB.Debugger FindDebuggerWithID(int id)
        {
            var __ret = new LLDB.Debugger.Internal();
            Internal.FindDebuggerWithID_0(new IntPtr(&__ret), id);
            return LLDB.Debugger.__CreateInstance(__ret);
        }

        public static LLDB.Error SetInternalVariable(string var_name, string value, string debugger_instance_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(var_name);
            var arg1 = Marshal.StringToHGlobalAnsi(value);
            var arg2 = Marshal.StringToHGlobalAnsi(debugger_instance_name);
            var __ret = new LLDB.Error.Internal();
            Internal.SetInternalVariable_0(new IntPtr(&__ret), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public static LLDB.StringList GetInternalVariableValue(string var_name, string debugger_instance_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(var_name);
            var arg1 = Marshal.StringToHGlobalAnsi(debugger_instance_name);
            var __ret = new LLDB.StringList.Internal();
            Internal.GetInternalVariableValue_0(new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            return LLDB.StringList.__CreateInstance(__ret);
        }

        public bool Async
        {
            get
            {
                var __ret = Internal.GetAsync_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetAsync_0((__Instance + __PointerAdjustment), value);
            }
        }

        public global::System.IntPtr InputFileHandle
        {
            get
            {
                var __ret = Internal.GetInputFileHandle_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::System.IntPtr OutputFileHandle
        {
            get
            {
                var __ret = Internal.GetOutputFileHandle_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public global::System.IntPtr ErrorFileHandle
        {
            get
            {
                var __ret = Internal.GetErrorFileHandle_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumTargets
        {
            get
            {
                var __ret = Internal.GetNumTargets_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.Target SelectedTarget
        {
            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.SetSelectedTarget_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public LLDB.Platform SelectedPlatform
        {
            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.SetSelectedPlatform_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public bool UseExternalEditor
        {
            get
            {
                var __ret = Internal.GetUseExternalEditor_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool UseColor
        {
            get
            {
                var __ret = Internal.GetUseColor_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public static string VersionString
        {
            get
            {
                var __ret = Internal.GetVersionString_0();
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string InstanceName
        {
            get
            {
                var __ret = Internal.GetInstanceName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint TerminalWidth
        {
            get
            {
                var __ret = Internal.GetTerminalWidth_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetTerminalWidth_0((__Instance + __PointerAdjustment), value);
            }
        }

        public ulong ID
        {
            get
            {
                var __ret = Internal.GetID_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public string Prompt
        {
            get
            {
                var __ret = Internal.GetPrompt_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetPrompt_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public LLDB.ScriptLanguage ScriptLanguage
        {
            get
            {
                var __ret = Internal.GetScriptLanguage_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetScriptLanguage_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public bool CloseInputOnEOF
        {
            get
            {
                var __ret = Internal.GetCloseInputOnEOF_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetCloseInputOnEOF_0((__Instance + __PointerAdjustment), value);
            }
        }

        public uint NumCategories
        {
            get
            {
                var __ret = Internal.GetNumCategories_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
