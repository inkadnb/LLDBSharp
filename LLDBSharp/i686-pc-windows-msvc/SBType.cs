//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class TypeMember : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBTypeMember@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBTypeMember@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBTypeMember@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBTypeMember@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetType@SBTypeMember@lldb@@QAE?AVSBType@2@XZ")]
            internal static extern void GetType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsBitfield@SBTypeMember@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsBitfield_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBTypeMember@lldb@@QAE_NAAVSBStream@2@W4DescriptionLevel@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description, LLDB.DescriptionLevel description_level);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBTypeMember@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOffsetInBytes@SBTypeMember@lldb@@QAE_KXZ")]
            internal static extern ulong GetOffsetInBytes_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOffsetInBits@SBTypeMember@lldb@@QAE_KXZ")]
            internal static extern ulong GetOffsetInBits_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBitfieldSizeInBits@SBTypeMember@lldb@@QAEIXZ")]
            internal static extern uint GetBitfieldSizeInBits_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeMember> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeMember>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static TypeMember __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new TypeMember(native.ToPointer(), skipVTables);
        }

        public static TypeMember __CreateInstance(TypeMember.Internal native, bool skipVTables = false)
        {
            return new TypeMember(native, skipVTables);
        }

        private static void* __CopyValue(TypeMember.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.TypeMember.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private TypeMember(TypeMember.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeMember(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeMember()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public TypeMember(LLDB.TypeMember rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.TypeMember __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Type GetType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public bool IsBitfield()
        {
            var __ret = Internal.IsBitfield_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description, LLDB.DescriptionLevel description_level)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var arg1 = description_level;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public ulong OffsetInBytes
        {
            get
            {
                var __ret = Internal.GetOffsetInBytes_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong OffsetInBits
        {
            get
            {
                var __ret = Internal.GetOffsetInBits_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint BitfieldSizeInBits
        {
            get
            {
                var __ret = Internal.GetBitfieldSizeInBits_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class TypeMemberFunction : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBTypeMemberFunction@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBTypeMemberFunction@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBTypeMemberFunction@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBTypeMemberFunction@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetType@SBTypeMemberFunction@lldb@@QAE?AVSBType@2@XZ")]
            internal static extern void GetType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetReturnType@SBTypeMemberFunction@lldb@@QAE?AVSBType@2@XZ")]
            internal static extern void GetReturnType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetArgumentTypeAtIndex@SBTypeMemberFunction@lldb@@QAE?AVSBType@2@I@Z")]
            internal static extern void GetArgumentTypeAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBTypeMemberFunction@lldb@@QAE_NAAVSBStream@2@W4DescriptionLevel@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description, LLDB.DescriptionLevel description_level);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBTypeMemberFunction@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDemangledName@SBTypeMemberFunction@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetDemangledName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetMangledName@SBTypeMemberFunction@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetMangledName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumberOfArguments@SBTypeMemberFunction@lldb@@QAEIXZ")]
            internal static extern uint GetNumberOfArguments_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetKind@SBTypeMemberFunction@lldb@@QAE?AW4MemberFunctionKind@2@XZ")]
            internal static extern LLDB.MemberFunctionKind GetKind_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeMemberFunction> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeMemberFunction>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static TypeMemberFunction __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new TypeMemberFunction(native.ToPointer(), skipVTables);
        }

        public static TypeMemberFunction __CreateInstance(TypeMemberFunction.Internal native, bool skipVTables = false)
        {
            return new TypeMemberFunction(native, skipVTables);
        }

        private static void* __CopyValue(TypeMemberFunction.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.TypeMemberFunction.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private TypeMemberFunction(TypeMemberFunction.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeMemberFunction(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeMemberFunction()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public TypeMemberFunction(LLDB.TypeMemberFunction rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.TypeMemberFunction __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Type GetType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetReturnType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetReturnType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetArgumentTypeAtIndex(uint _0)
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetArgumentTypeAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), _0);
            return LLDB.Type.__CreateInstance(__ret);
        }

        public bool GetDescription(LLDB.Stream description, LLDB.DescriptionLevel description_level)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var arg1 = description_level;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string DemangledName
        {
            get
            {
                var __ret = Internal.GetDemangledName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string MangledName
        {
            get
            {
                var __ret = Internal.GetMangledName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint NumberOfArguments
        {
            get
            {
                var __ret = Internal.GetNumberOfArguments_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.MemberFunctionKind Kind
        {
            get
            {
                var __ret = Internal.GetKind_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class Type : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBType@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBType@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBType@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBType@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsPointerType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsPointerType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsReferenceType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsReferenceType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsFunctionType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsFunctionType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsPolymorphicClass@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsPolymorphicClass_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsArrayType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsArrayType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsVectorType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsVectorType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsTypedefType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsTypedefType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsAnonymousType@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsAnonymousType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPointerType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetPointerType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPointeeType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetPointeeType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetReferenceType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetReferenceType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTypedefedType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetTypedefedType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDereferencedType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetDereferencedType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetUnqualifiedType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetUnqualifiedType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetArrayElementType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetArrayElementType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetVectorElementType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetVectorElementType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCanonicalType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetCanonicalType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBasicType@SBType@lldb@@QAE?AV12@W4BasicType@2@@Z")]
            internal static extern void GetBasicType_1(global::System.IntPtr instance, global::System.IntPtr @return, LLDB.BasicType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFieldAtIndex@SBType@lldb@@QAE?AVSBTypeMember@2@I@Z")]
            internal static extern void GetFieldAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDirectBaseClassAtIndex@SBType@lldb@@QAE?AVSBTypeMember@2@I@Z")]
            internal static extern void GetDirectBaseClassAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetVirtualBaseClassAtIndex@SBType@lldb@@QAE?AVSBTypeMember@2@I@Z")]
            internal static extern void GetVirtualBaseClassAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetEnumMembers@SBType@lldb@@QAE?AVSBTypeEnumMemberList@2@XZ")]
            internal static extern void GetEnumMembers_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTemplateArgumentType@SBType@lldb@@QAE?AV12@I@Z")]
            internal static extern void GetTemplateArgumentType_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTemplateArgumentKind@SBType@lldb@@QAE?AW4TemplateArgumentKind@2@I@Z")]
            internal static extern LLDB.TemplateArgumentKind GetTemplateArgumentKind_0(global::System.IntPtr instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFunctionReturnType@SBType@lldb@@QAE?AV12@XZ")]
            internal static extern void GetFunctionReturnType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFunctionArgumentTypes@SBType@lldb@@QAE?AVSBTypeList@2@XZ")]
            internal static extern void GetFunctionArgumentTypes_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetMemberFunctionAtIndex@SBType@lldb@@QAE?AVSBTypeMemberFunction@2@I@Z")]
            internal static extern void GetMemberFunctionAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsTypeComplete@SBType@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsTypeComplete_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBType@lldb@@QAE_NAAVSBStream@2@W4DescriptionLevel@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description, LLDB.DescriptionLevel description_level);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??8SBType@lldb@@QAE_NAAV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??9SBType@lldb@@QAE_NAAV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetByteSize@SBType@lldb@@QAE_KXZ")]
            internal static extern ulong GetByteSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBasicType@SBType@lldb@@QAE?AW4BasicType@2@XZ")]
            internal static extern LLDB.BasicType GetBasicType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumberOfFields@SBType@lldb@@QAEIXZ")]
            internal static extern uint GetNumberOfFields_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumberOfDirectBaseClasses@SBType@lldb@@QAEIXZ")]
            internal static extern uint GetNumberOfDirectBaseClasses_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumberOfVirtualBaseClasses@SBType@lldb@@QAEIXZ")]
            internal static extern uint GetNumberOfVirtualBaseClasses_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumberOfTemplateArguments@SBType@lldb@@QAEIXZ")]
            internal static extern uint GetNumberOfTemplateArguments_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumberOfMemberFunctions@SBType@lldb@@QAEIXZ")]
            internal static extern uint GetNumberOfMemberFunctions_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBType@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDisplayTypeName@SBType@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetDisplayTypeName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTypeClass@SBType@lldb@@QAE?AW4TypeClass@2@XZ")]
            internal static extern LLDB.TypeClass GetTypeClass_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTypeFlags@SBType@lldb@@QAEIXZ")]
            internal static extern uint GetTypeFlags_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Type __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Type(native.ToPointer(), skipVTables);
        }

        public static Type __CreateInstance(Type.Internal native, bool skipVTables = false)
        {
            return new Type(native, skipVTables);
        }

        private static void* __CopyValue(Type.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.Type.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Type(Type.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Type(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Type()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Type(LLDB.Type rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Type __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsPointerType()
        {
            var __ret = Internal.IsPointerType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsReferenceType()
        {
            var __ret = Internal.IsReferenceType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsFunctionType()
        {
            var __ret = Internal.IsFunctionType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsPolymorphicClass()
        {
            var __ret = Internal.IsPolymorphicClass_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsArrayType()
        {
            var __ret = Internal.IsArrayType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsVectorType()
        {
            var __ret = Internal.IsVectorType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsTypedefType()
        {
            var __ret = Internal.IsTypedefType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsAnonymousType()
        {
            var __ret = Internal.IsAnonymousType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Type GetPointerType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetPointerType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetPointeeType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetPointeeType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetReferenceType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetReferenceType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetTypedefedType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetTypedefedType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetDereferencedType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetDereferencedType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetUnqualifiedType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetUnqualifiedType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetArrayElementType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetArrayElementType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetVectorElementType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetVectorElementType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetCanonicalType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetCanonicalType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Type GetBasicType(LLDB.BasicType type)
        {
            var arg0 = type;
            var __ret = new LLDB.Type.Internal();
            Internal.GetBasicType_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.TypeMember GetFieldAtIndex(uint idx)
        {
            var __ret = new LLDB.TypeMember.Internal();
            Internal.GetFieldAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.TypeMember.__CreateInstance(__ret);
        }

        public LLDB.TypeMember GetDirectBaseClassAtIndex(uint idx)
        {
            var __ret = new LLDB.TypeMember.Internal();
            Internal.GetDirectBaseClassAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.TypeMember.__CreateInstance(__ret);
        }

        public LLDB.TypeMember GetVirtualBaseClassAtIndex(uint idx)
        {
            var __ret = new LLDB.TypeMember.Internal();
            Internal.GetVirtualBaseClassAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.TypeMember.__CreateInstance(__ret);
        }

        public LLDB.TypeEnumMemberList GetEnumMembers()
        {
            var __ret = new LLDB.TypeEnumMemberList.Internal();
            Internal.GetEnumMembers_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.TypeEnumMemberList.__CreateInstance(__ret);
        }

        public LLDB.Type GetTemplateArgumentType(uint idx)
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetTemplateArgumentType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.TemplateArgumentKind GetTemplateArgumentKind(uint idx)
        {
            var __ret = Internal.GetTemplateArgumentKind_0((__Instance + __PointerAdjustment), idx);
            return __ret;
        }

        public LLDB.Type GetFunctionReturnType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetFunctionReturnType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.TypeList GetFunctionArgumentTypes()
        {
            var __ret = new LLDB.TypeList.Internal();
            Internal.GetFunctionArgumentTypes_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.TypeList.__CreateInstance(__ret);
        }

        public LLDB.TypeMemberFunction GetMemberFunctionAtIndex(uint idx)
        {
            var __ret = new LLDB.TypeMemberFunction.Internal();
            Internal.GetMemberFunctionAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.TypeMemberFunction.__CreateInstance(__ret);
        }

        public bool IsTypeComplete()
        {
            var __ret = Internal.IsTypeComplete_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description, LLDB.DescriptionLevel description_level)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var arg1 = description_level;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public static bool operator ==(LLDB.Type __op, LLDB.Type rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Type;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.Type __op, LLDB.Type rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public ulong ByteSize
        {
            get
            {
                var __ret = Internal.GetByteSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.BasicType BasicType
        {
            get
            {
                var __ret = Internal.GetBasicType_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumberOfFields
        {
            get
            {
                var __ret = Internal.GetNumberOfFields_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumberOfDirectBaseClasses
        {
            get
            {
                var __ret = Internal.GetNumberOfDirectBaseClasses_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumberOfVirtualBaseClasses
        {
            get
            {
                var __ret = Internal.GetNumberOfVirtualBaseClasses_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumberOfTemplateArguments
        {
            get
            {
                var __ret = Internal.GetNumberOfTemplateArguments_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumberOfMemberFunctions
        {
            get
            {
                var __ret = Internal.GetNumberOfMemberFunctions_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string DisplayTypeName
        {
            get
            {
                var __ret = Internal.GetDisplayTypeName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public LLDB.TypeClass TypeClass
        {
            get
            {
                var __ret = Internal.GetTypeClass_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint TypeFlags
        {
            get
            {
                var __ret = Internal.GetTypeFlags_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }

    public unsafe partial class TypeList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBTypeList@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBTypeList@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBTypeList@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBTypeList@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Append@SBTypeList@lldb@@QAEXVSBType@2@@Z")]
            internal static extern void Append_0(global::System.IntPtr instance, LLDB.Type.Internal type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTypeAtIndex@SBTypeList@lldb@@QAE?AVSBType@2@I@Z")]
            internal static extern void GetTypeAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSize@SBTypeList@lldb@@QAEIXZ")]
            internal static extern uint GetSize_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeList> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeList>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static TypeList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new TypeList(native.ToPointer(), skipVTables);
        }

        public static TypeList __CreateInstance(TypeList.Internal native, bool skipVTables = false)
        {
            return new TypeList(native, skipVTables);
        }

        private static void* __CopyValue(TypeList.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.TypeList.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private TypeList(TypeList.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeList()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public TypeList(LLDB.TypeList rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.TypeList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Append(LLDB.Type type)
        {
            var arg0 = ReferenceEquals(type, null) ? new LLDB.Type.Internal() : *(LLDB.Type.Internal*) (type.__Instance);
            Internal.Append_0((__Instance + __PointerAdjustment), arg0);
        }

        public LLDB.Type GetTypeAtIndex(uint index)
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetTypeAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), index);
            return LLDB.Type.__CreateInstance(__ret);
        }

        public uint Size
        {
            get
            {
                var __ret = Internal.GetSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
