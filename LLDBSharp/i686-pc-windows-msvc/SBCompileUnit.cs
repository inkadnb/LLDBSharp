//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class CompileUnit : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBCompileUnit@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBCompileUnit@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBCompileUnit@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBCompileUnit@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileSpec@SBCompileUnit@lldb@@QBE?AVSBFileSpec@2@XZ")]
            internal static extern void GetFileSpec_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLineEntryAtIndex@SBCompileUnit@lldb@@QBE?AVSBLineEntry@2@I@Z")]
            internal static extern void GetLineEntryAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindLineEntryIndex@SBCompileUnit@lldb@@QBEIIIPAVSBFileSpec@2@@Z")]
            internal static extern uint FindLineEntryIndex_0(global::System.IntPtr instance, uint start_idx, uint line, global::System.IntPtr inline_file_spec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindLineEntryIndex@SBCompileUnit@lldb@@QBEIIIPAVSBFileSpec@2@_N@Z")]
            internal static extern uint FindLineEntryIndex_1(global::System.IntPtr instance, uint start_idx, uint line, global::System.IntPtr inline_file_spec, bool exact);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSupportFileAtIndex@SBCompileUnit@lldb@@QBE?AVSBFileSpec@2@I@Z")]
            internal static extern void GetSupportFileAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindSupportFileIndex@SBCompileUnit@lldb@@QAEIIABVSBFileSpec@2@_N@Z")]
            internal static extern uint FindSupportFileIndex_0(global::System.IntPtr instance, uint start_idx, global::System.IntPtr sb_file, bool full);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTypes@SBCompileUnit@lldb@@QAE?AVSBTypeList@2@I@Z")]
            internal static extern void GetTypes_0(global::System.IntPtr instance, global::System.IntPtr @return, uint type_mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??8SBCompileUnit@lldb@@QBE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??9SBCompileUnit@lldb@@QBE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBCompileUnit@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumLineEntries@SBCompileUnit@lldb@@QBEIXZ")]
            internal static extern uint GetNumLineEntries_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumSupportFiles@SBCompileUnit@lldb@@QBEIXZ")]
            internal static extern uint GetNumSupportFiles_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLanguage@SBCompileUnit@lldb@@QAE?AW4LanguageType@2@XZ")]
            internal static extern LLDB.LanguageType GetLanguage_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CompileUnit> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CompileUnit>();

        private readonly bool __ownsNativeInstance;

        public static CompileUnit __CreateInstance(global::System.IntPtr native)
        {
            return new CompileUnit((CompileUnit.Internal*) native);
        }

        public static CompileUnit __CreateInstance(CompileUnit.Internal native)
        {
            return new CompileUnit(native);
        }

        private static CompileUnit.Internal* __CopyValue(CompileUnit.Internal native)
        {
            var ret = (CompileUnit.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private CompileUnit(CompileUnit.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CompileUnit(CompileUnit.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public CompileUnit()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.CompileUnit __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public LLDB.FileSpec GetFileSpec()
        {
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetFileSpec_0(__Instance, new IntPtr(&__ret));
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public LLDB.LineEntry GetLineEntryAtIndex(uint idx)
        {
            var arg0 = idx;
            var __ret = new LLDB.LineEntry.Internal();
            Internal.GetLineEntryAtIndex_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.LineEntry.__CreateInstance(__ret);
        }

        public uint FindLineEntryIndex(uint start_idx, uint line, LLDB.FileSpec inline_file_spec)
        {
            var arg0 = start_idx;
            var arg1 = line;
            var arg2 = ReferenceEquals(inline_file_spec, null) ? global::System.IntPtr.Zero : inline_file_spec.__Instance;
            var __ret = Internal.FindLineEntryIndex_0(__Instance, arg0, arg1, arg2);
            return __ret;
        }

        public uint FindLineEntryIndex(uint start_idx, uint line, LLDB.FileSpec inline_file_spec, bool exact)
        {
            var arg0 = start_idx;
            var arg1 = line;
            var arg2 = ReferenceEquals(inline_file_spec, null) ? global::System.IntPtr.Zero : inline_file_spec.__Instance;
            var __ret = Internal.FindLineEntryIndex_1(__Instance, arg0, arg1, arg2, exact);
            return __ret;
        }

        public LLDB.FileSpec GetSupportFileAtIndex(uint idx)
        {
            var arg0 = idx;
            var __ret = new LLDB.FileSpec.Internal();
            Internal.GetSupportFileAtIndex_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.FileSpec.__CreateInstance(__ret);
        }

        public uint FindSupportFileIndex(uint start_idx, LLDB.FileSpec sb_file, bool full)
        {
            var arg0 = start_idx;
            var arg1 = ReferenceEquals(sb_file, null) ? global::System.IntPtr.Zero : sb_file.__Instance;
            var __ret = Internal.FindSupportFileIndex_0(__Instance, arg0, arg1, full);
            return __ret;
        }

        /// <summary>
        /// <para>Get all types matching type_mask from debug info in this compile
        /// unit.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Get all types matching \a type_mask from debug info in
        /// this</para>
        /// <para></para>
        /// <para>    /// compile unit.</para>
        /// <para></para>
        /// <para>    ///</para>
        /// <para></para>
        /// <para>    /// @param[in] type_mask</para>
        /// <para></para>
        /// <para>    ///    A bitfield that consists of one or more bits logically
        /// OR'ed</para>
        /// <para></para>
        /// <para>    ///    together from the lldb::TypeClass enumeration. This
        /// allows</para>
        /// <para></para>
        /// <para>    ///    you to request only structure types, or only class,
        /// struct</para>
        /// <para></para>
        /// <para>    ///    and union types. Passing in lldb::eTypeClassAny will
        /// return</para>
        /// <para></para>
        /// <para>    ///    all types found in the debug information for this
        /// compile</para>
        /// <para></para>
        /// <para>    ///    unit.</para>
        /// <para></para>
        /// <para>    ///</para>
        /// <para></para>
        /// <para>    /// @return</para>
        /// <para></para>
        /// <para>    ///    A list of types in this compile unit that match \a
        /// type_mask</para>
        /// </remarks>
        public LLDB.TypeList GetTypes(uint type_mask)
        {
            var arg0 = type_mask;
            var __ret = new LLDB.TypeList.Internal();
            Internal.GetTypes_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.TypeList.__CreateInstance(__ret);
        }

        public static bool operator ==(LLDB.CompileUnit __op, LLDB.CompileUnit rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as CompileUnit;
        }

        public static bool operator !=(LLDB.CompileUnit __op, LLDB.CompileUnit rhs)
        {
            var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
            var arg1 = ReferenceEquals(rhs, null) ? global::System.IntPtr.Zero : rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            var arg0 = ReferenceEquals(description, null) ? global::System.IntPtr.Zero : description.__Instance;
            var __ret = Internal.GetDescription_0(__Instance, arg0);
            return __ret;
        }

        public uint NumLineEntries
        {
            get
            {
                var __ret = Internal.GetNumLineEntries_0(__Instance);
                return __ret;
            }
        }

        public uint NumSupportFiles
        {
            get
            {
                var __ret = Internal.GetNumSupportFiles_0(__Instance);
                return __ret;
            }
        }

        public LLDB.LanguageType Language
        {
            get
            {
                var __ret = Internal.GetLanguage_0(__Instance);
                return __ret;
            }
        }
    }
}
