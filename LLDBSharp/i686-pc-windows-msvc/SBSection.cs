//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Section : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSection@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBSection@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBSection@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBSection@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetParent@SBSection@lldb@@QAE?AV12@XZ")]
            internal static extern void GetParent_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindSubSection@SBSection@lldb@@QAE?AV12@PBD@Z")]
            internal static extern void FindSubSection_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr sect_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSubSectionAtIndex@SBSection@lldb@@QAE?AV12@I@Z")]
            internal static extern void GetSubSectionAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLoadAddress@SBSection@lldb@@QAE_KAAVSBTarget@2@@Z")]
            internal static extern ulong GetLoadAddress_0(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSectionData@SBSection@lldb@@QAE?AVSBData@2@XZ")]
            internal static extern void GetSectionData_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSectionData@SBSection@lldb@@QAE?AVSBData@2@_K0@Z")]
            internal static extern void GetSectionData_1(global::System.IntPtr instance, global::System.IntPtr @return, ulong offset, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??8SBSection@lldb@@QAE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??9SBSection@lldb@@QAE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBSection@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBSection@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumSubSections@SBSection@lldb@@QAEIXZ")]
            internal static extern uint GetNumSubSections_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileAddress@SBSection@lldb@@QAE_KXZ")]
            internal static extern ulong GetFileAddress_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetByteSize@SBSection@lldb@@QAE_KXZ")]
            internal static extern ulong GetByteSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileOffset@SBSection@lldb@@QAE_KXZ")]
            internal static extern ulong GetFileOffset_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileByteSize@SBSection@lldb@@QAE_KXZ")]
            internal static extern ulong GetFileByteSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSectionType@SBSection@lldb@@QAE?AW4SectionType@2@XZ")]
            internal static extern LLDB.SectionType GetSectionType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTargetByteSize@SBSection@lldb@@QAEIXZ")]
            internal static extern uint GetTargetByteSize_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Section> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Section>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Section __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Section(native.ToPointer(), skipVTables);
        }

        public static Section __CreateInstance(Section.Internal native, bool skipVTables = false)
        {
            return new Section(native, skipVTables);
        }

        private static void* __CopyValue(Section.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.Section.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Section(Section.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Section(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Section()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Section(LLDB.Section rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Section __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.Section GetParent()
        {
            var __ret = new LLDB.Section.Internal();
            Internal.GetParent_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Section.__CreateInstance(__ret);
        }

        public LLDB.Section FindSubSection(string sect_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sect_name);
            var __ret = new LLDB.Section.Internal();
            Internal.FindSubSection_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Section.__CreateInstance(__ret);
        }

        public LLDB.Section GetSubSectionAtIndex(uint idx)
        {
            var __ret = new LLDB.Section.Internal();
            Internal.GetSubSectionAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), idx);
            return LLDB.Section.__CreateInstance(__ret);
        }

        public ulong GetLoadAddress(LLDB.Target target)
        {
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg0 = target.__Instance;
            var __ret = Internal.GetLoadAddress_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public LLDB.Data GetSectionData()
        {
            var __ret = new LLDB.Data.Internal();
            Internal.GetSectionData_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Data.__CreateInstance(__ret);
        }

        public LLDB.Data GetSectionData(ulong offset, ulong size)
        {
            var __ret = new LLDB.Data.Internal();
            Internal.GetSectionData_1((__Instance + __PointerAdjustment), new IntPtr(&__ret), offset, size);
            return LLDB.Data.__CreateInstance(__ret);
        }

        public static bool operator ==(LLDB.Section __op, LLDB.Section rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Section;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.Section __op, LLDB.Section rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint NumSubSections
        {
            get
            {
                var __ret = Internal.GetNumSubSections_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong FileAddress
        {
            get
            {
                var __ret = Internal.GetFileAddress_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong ByteSize
        {
            get
            {
                var __ret = Internal.GetByteSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong FileOffset
        {
            get
            {
                var __ret = Internal.GetFileOffset_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public ulong FileByteSize
        {
            get
            {
                var __ret = Internal.GetFileByteSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.SectionType SectionType
        {
            get
            {
                var __ret = Internal.GetSectionType_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint TargetByteSize
        {
            get
            {
                var __ret = Internal.GetTargetByteSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
