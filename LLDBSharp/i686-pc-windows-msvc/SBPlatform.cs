//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class PlatformConnectOptions : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatformConnectOptions@lldb@@QAE@PBD@Z")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::System.IntPtr url);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatformConnectOptions@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBPlatformConnectOptions@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?EnableRsync@SBPlatformConnectOptions@lldb@@QAEXPBD0_N@Z")]
            internal static extern void EnableRsync_0(global::System.IntPtr instance, global::System.IntPtr options, global::System.IntPtr remote_path_prefix, bool omit_remote_hostname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DisableRsync@SBPlatformConnectOptions@lldb@@QAEXXZ")]
            internal static extern void DisableRsync_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetURL@SBPlatformConnectOptions@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetURL_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetURL@SBPlatformConnectOptions@lldb@@QAEXPBD@Z")]
            internal static extern void SetURL_0(global::System.IntPtr instance, global::System.IntPtr url);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetRsyncEnabled@SBPlatformConnectOptions@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetRsyncEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLocalCacheDirectory@SBPlatformConnectOptions@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetLocalCacheDirectory_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetLocalCacheDirectory@SBPlatformConnectOptions@lldb@@QAEXPBD@Z")]
            internal static extern void SetLocalCacheDirectory_0(global::System.IntPtr instance, global::System.IntPtr path);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, PlatformConnectOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, PlatformConnectOptions>();

        private readonly bool __ownsNativeInstance;

        public static PlatformConnectOptions __CreateInstance(global::System.IntPtr native)
        {
            return new PlatformConnectOptions((PlatformConnectOptions.Internal*) native);
        }

        public static PlatformConnectOptions __CreateInstance(PlatformConnectOptions.Internal native)
        {
            return new PlatformConnectOptions(native);
        }

        private static PlatformConnectOptions.Internal* __CopyValue(PlatformConnectOptions.Internal native)
        {
            var ret = (PlatformConnectOptions.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private PlatformConnectOptions(PlatformConnectOptions.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PlatformConnectOptions(PlatformConnectOptions.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public PlatformConnectOptions(string url)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(url);
            Internal.ctor_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.PlatformConnectOptions __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void EnableRsync(string options, string remote_path_prefix, bool omit_remote_hostname)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(options);
            var arg1 = Marshal.StringToHGlobalAnsi(remote_path_prefix);
            Internal.EnableRsync_0(__Instance, arg0, arg1, omit_remote_hostname);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
        }

        public void DisableRsync()
        {
            Internal.DisableRsync_0(__Instance);
        }

        public string URL
        {
            get
            {
                var __ret = Internal.GetURL_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetURL_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public bool RsyncEnabled
        {
            get
            {
                var __ret = Internal.GetRsyncEnabled_0(__Instance);
                return __ret;
            }
        }

        public string LocalCacheDirectory
        {
            get
            {
                var __ret = Internal.GetLocalCacheDirectory_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetLocalCacheDirectory_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }
    }

    public unsafe partial class PlatformShellCommand : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatformShellCommand@lldb@@QAE@PBD@Z")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::System.IntPtr shell_command);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatformShellCommand@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBPlatformShellCommand@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBPlatformShellCommand@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCommand@SBPlatformShellCommand@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetCommand_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCommand@SBPlatformShellCommand@lldb@@QAEXPBD@Z")]
            internal static extern void SetCommand_0(global::System.IntPtr instance, global::System.IntPtr shell_command);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetWorkingDirectory@SBPlatformShellCommand@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetWorkingDirectory_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetWorkingDirectory@SBPlatformShellCommand@lldb@@QAEXPBD@Z")]
            internal static extern void SetWorkingDirectory_0(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTimeoutSeconds@SBPlatformShellCommand@lldb@@QAEIXZ")]
            internal static extern uint GetTimeoutSeconds_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetTimeoutSeconds@SBPlatformShellCommand@lldb@@QAEXI@Z")]
            internal static extern void SetTimeoutSeconds_0(global::System.IntPtr instance, uint sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSignal@SBPlatformShellCommand@lldb@@QAEHXZ")]
            internal static extern int GetSignal_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetStatus@SBPlatformShellCommand@lldb@@QAEHXZ")]
            internal static extern int GetStatus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOutput@SBPlatformShellCommand@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetOutput_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, PlatformShellCommand> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, PlatformShellCommand>();

        private readonly bool __ownsNativeInstance;

        public static PlatformShellCommand __CreateInstance(global::System.IntPtr native)
        {
            return new PlatformShellCommand((PlatformShellCommand.Internal*) native);
        }

        public static PlatformShellCommand __CreateInstance(PlatformShellCommand.Internal native)
        {
            return new PlatformShellCommand(native);
        }

        private static PlatformShellCommand.Internal* __CopyValue(PlatformShellCommand.Internal native)
        {
            var ret = (PlatformShellCommand.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private PlatformShellCommand(PlatformShellCommand.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PlatformShellCommand(PlatformShellCommand.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public PlatformShellCommand(string shell_command)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(shell_command);
            Internal.ctor_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.PlatformShellCommand __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public string Command
        {
            get
            {
                var __ret = Internal.GetCommand_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetCommand_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string WorkingDirectory
        {
            get
            {
                var __ret = Internal.GetWorkingDirectory_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetWorkingDirectory_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public uint TimeoutSeconds
        {
            get
            {
                var __ret = Internal.GetTimeoutSeconds_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetTimeoutSeconds_0(__Instance, arg0);
            }
        }

        public int Signal
        {
            get
            {
                var __ret = Internal.GetSignal_0(__Instance);
                return __ret;
            }
        }

        public int Status
        {
            get
            {
                var __ret = Internal.GetStatus_0(__Instance);
                return __ret;
            }
        }

        public string Output
        {
            get
            {
                var __ret = Internal.GetOutput_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }

    public unsafe partial class Platform : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatform@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatform@lldb@@QAE@PBD@Z")]
            internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::System.IntPtr platform_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBPlatform@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBPlatform@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBPlatform@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBPlatform@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetWorkingDirectory@SBPlatform@lldb@@QAE_NPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetWorkingDirectory_0(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?ConnectRemote@SBPlatform@lldb@@QAE?AVSBError@2@AAVSBPlatformConnectOptions@2@@Z")]
            internal static extern void ConnectRemote_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr connect_options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?DisconnectRemote@SBPlatform@lldb@@QAEXXZ")]
            internal static extern void DisconnectRemote_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsConnected@SBPlatform@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsConnected_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Put@SBPlatform@lldb@@QAE?AVSBError@2@AAVSBFileSpec@2@0@Z")]
            internal static extern void Put_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr src, global::System.IntPtr dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Get@SBPlatform@lldb@@QAE?AVSBError@2@AAVSBFileSpec@2@0@Z")]
            internal static extern void Get_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr src, global::System.IntPtr dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Install@SBPlatform@lldb@@QAE?AVSBError@2@AAVSBFileSpec@2@0@Z")]
            internal static extern void Install_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr src, global::System.IntPtr dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Run@SBPlatform@lldb@@QAE?AVSBError@2@AAVSBPlatformShellCommand@2@@Z")]
            internal static extern void Run_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr shell_command);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Launch@SBPlatform@lldb@@QAE?AVSBError@2@AAVSBLaunchInfo@2@@Z")]
            internal static extern void Launch_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr launch_info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Kill@SBPlatform@lldb@@QAE?AVSBError@2@_K@Z")]
            internal static extern void Kill_0(global::System.IntPtr instance, global::System.IntPtr @return, ulong pid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?MakeDirectory@SBPlatform@lldb@@QAE?AVSBError@2@PBDI@Z")]
            internal static extern void MakeDirectory_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr path, uint file_permissions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFilePermissions@SBPlatform@lldb@@QAEIPBD@Z")]
            internal static extern uint GetFilePermissions_0(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetFilePermissions@SBPlatform@lldb@@QAE?AVSBError@2@PBDI@Z")]
            internal static extern void SetFilePermissions_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr path, uint file_permissions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetWorkingDirectory@SBPlatform@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetWorkingDirectory_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBPlatform@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetTriple@SBPlatform@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetTriple_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetHostname@SBPlatform@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetHostname_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOSBuild@SBPlatform@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetOSBuild_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOSDescription@SBPlatform@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetOSDescription_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOSMajorVersion@SBPlatform@lldb@@QAEIXZ")]
            internal static extern uint GetOSMajorVersion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOSMinorVersion@SBPlatform@lldb@@QAEIXZ")]
            internal static extern uint GetOSMinorVersion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOSUpdateVersion@SBPlatform@lldb@@QAEIXZ")]
            internal static extern uint GetOSUpdateVersion_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Platform> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Platform>();

        private readonly bool __ownsNativeInstance;

        public static Platform __CreateInstance(global::System.IntPtr native)
        {
            return new Platform((Platform.Internal*) native);
        }

        public static Platform __CreateInstance(Platform.Internal native)
        {
            return new Platform(native);
        }

        private static Platform.Internal* __CopyValue(Platform.Internal native)
        {
            var ret = (Platform.Internal*) Marshal.AllocHGlobal(8);
            *ret = native;
            return ret;
        }

        private Platform(Platform.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Platform(Platform.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public Platform()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public Platform(string platform_name)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(platform_name);
            Internal.ctor_1(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.Platform __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public bool SetWorkingDirectory(string path)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            var __ret = Internal.SetWorkingDirectory_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public LLDB.Error ConnectRemote(LLDB.PlatformConnectOptions connect_options)
        {
            var arg0 = ReferenceEquals(connect_options, null) ? global::System.IntPtr.Zero : connect_options.__Instance;
            var __ret = new LLDB.Error.Internal();
            Internal.ConnectRemote_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public void DisconnectRemote()
        {
            Internal.DisconnectRemote_0(__Instance);
        }

        public bool IsConnected()
        {
            var __ret = Internal.IsConnected_0(__Instance);
            return __ret;
        }

        public LLDB.Error Put(LLDB.FileSpec src, LLDB.FileSpec dst)
        {
            var arg0 = ReferenceEquals(src, null) ? global::System.IntPtr.Zero : src.__Instance;
            var arg1 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            var __ret = new LLDB.Error.Internal();
            Internal.Put_0(__Instance, new IntPtr(&__ret), arg0, arg1);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Get(LLDB.FileSpec src, LLDB.FileSpec dst)
        {
            var arg0 = ReferenceEquals(src, null) ? global::System.IntPtr.Zero : src.__Instance;
            var arg1 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            var __ret = new LLDB.Error.Internal();
            Internal.Get_0(__Instance, new IntPtr(&__ret), arg0, arg1);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Install(LLDB.FileSpec src, LLDB.FileSpec dst)
        {
            var arg0 = ReferenceEquals(src, null) ? global::System.IntPtr.Zero : src.__Instance;
            var arg1 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            var __ret = new LLDB.Error.Internal();
            Internal.Install_0(__Instance, new IntPtr(&__ret), arg0, arg1);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Run(LLDB.PlatformShellCommand shell_command)
        {
            var arg0 = ReferenceEquals(shell_command, null) ? global::System.IntPtr.Zero : shell_command.__Instance;
            var __ret = new LLDB.Error.Internal();
            Internal.Run_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Launch(LLDB.LaunchInfo launch_info)
        {
            var arg0 = ReferenceEquals(launch_info, null) ? global::System.IntPtr.Zero : launch_info.__Instance;
            var __ret = new LLDB.Error.Internal();
            Internal.Launch_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error Kill(ulong pid)
        {
            var arg0 = pid;
            var __ret = new LLDB.Error.Internal();
            Internal.Kill_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public LLDB.Error MakeDirectory(string path, uint file_permissions)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            var arg1 = file_permissions;
            var __ret = new LLDB.Error.Internal();
            Internal.MakeDirectory_0(__Instance, new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public uint GetFilePermissions(string path)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            var __ret = Internal.GetFilePermissions_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public LLDB.Error SetFilePermissions(string path, uint file_permissions)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            var arg1 = file_permissions;
            var __ret = new LLDB.Error.Internal();
            Internal.SetFilePermissions_0(__Instance, new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public string WorkingDirectory
        {
            get
            {
                var __ret = Internal.GetWorkingDirectory_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string Triple
        {
            get
            {
                var __ret = Internal.GetTriple_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string Hostname
        {
            get
            {
                var __ret = Internal.GetHostname_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string OSBuild
        {
            get
            {
                var __ret = Internal.GetOSBuild_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string OSDescription
        {
            get
            {
                var __ret = Internal.GetOSDescription_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint OSMajorVersion
        {
            get
            {
                var __ret = Internal.GetOSMajorVersion_0(__Instance);
                return __ret;
            }
        }

        public uint OSMinorVersion
        {
            get
            {
                var __ret = Internal.GetOSMinorVersion_0(__Instance);
                return __ret;
            }
        }

        public uint OSUpdateVersion
        {
            get
            {
                var __ret = Internal.GetOSUpdateVersion_0(__Instance);
                return __ret;
            }
        }
    }
}
