//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class CommandReturnObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBCommandReturnObject@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBCommandReturnObject@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBCommandReturnObject@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBCommandReturnObject@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?PutOutput@SBCommandReturnObject@lldb@@QAEIPAU_iobuf@@@Z")]
            internal static extern uint PutOutput_0(global::System.IntPtr instance, global::System.IntPtr fh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?PutError@SBCommandReturnObject@lldb@@QAEIPAU_iobuf@@@Z")]
            internal static extern uint PutError_0(global::System.IntPtr instance, global::System.IntPtr fh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBCommandReturnObject@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Succeeded@SBCommandReturnObject@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Succeeded_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?HasResult@SBCommandReturnObject@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasResult_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AppendMessage@SBCommandReturnObject@lldb@@QAEXPBD@Z")]
            internal static extern void AppendMessage_0(global::System.IntPtr instance, global::System.IntPtr message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AppendWarning@SBCommandReturnObject@lldb@@QAEXPBD@Z")]
            internal static extern void AppendWarning_0(global::System.IntPtr instance, global::System.IntPtr message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBCommandReturnObject@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetImmediateOutputFile@SBCommandReturnObject@lldb@@QAEXPAU_iobuf@@_N@Z")]
            internal static extern void SetImmediateOutputFile_1(global::System.IntPtr instance, global::System.IntPtr fh, bool transfer_ownership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetImmediateErrorFile@SBCommandReturnObject@lldb@@QAEXPAU_iobuf@@_N@Z")]
            internal static extern void SetImmediateErrorFile_1(global::System.IntPtr instance, global::System.IntPtr fh, bool transfer_ownership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?PutCString@SBCommandReturnObject@lldb@@QAEXPBDH@Z")]
            internal static extern void PutCString_0(global::System.IntPtr instance, global::System.IntPtr @string, int len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?Printf@SBCommandReturnObject@lldb@@QAAIPBDZZ")]
            internal static extern uint Printf_0(global::System.IntPtr instance, global::System.IntPtr format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOutput@SBCommandReturnObject@lldb@@QAEPBD_N@Z")]
            internal static extern global::System.IntPtr GetOutput_1(global::System.IntPtr instance, bool only_if_no_immediate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetError@SBCommandReturnObject@lldb@@QAEPBD_N@Z")]
            internal static extern global::System.IntPtr GetError_1(global::System.IntPtr instance, bool only_if_no_immediate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetError@SBCommandReturnObject@lldb@@QAEXAAVSBError@2@PBD@Z")]
            internal static extern void SetError_0(global::System.IntPtr instance, global::System.IntPtr error, global::System.IntPtr fallback_error_cstr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOutput@SBCommandReturnObject@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetOutput_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetError@SBCommandReturnObject@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetError_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetError@SBCommandReturnObject@lldb@@QAEXPBD@Z")]
            internal static extern void SetError_1(global::System.IntPtr instance, global::System.IntPtr error_cstr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOutputSize@SBCommandReturnObject@lldb@@QAEIXZ")]
            internal static extern uint GetOutputSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetErrorSize@SBCommandReturnObject@lldb@@QAEIXZ")]
            internal static extern uint GetErrorSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetStatus@SBCommandReturnObject@lldb@@QAE?AW4ReturnStatus@2@XZ")]
            internal static extern LLDB.ReturnStatus GetStatus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetStatus@SBCommandReturnObject@lldb@@QAEXW4ReturnStatus@2@@Z")]
            internal static extern void SetStatus_0(global::System.IntPtr instance, LLDB.ReturnStatus status);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetImmediateOutputFile@SBCommandReturnObject@lldb@@QAEXPAU_iobuf@@@Z")]
            internal static extern void SetImmediateOutputFile_0(global::System.IntPtr instance, global::System.IntPtr fh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetImmediateErrorFile@SBCommandReturnObject@lldb@@QAEXPAU_iobuf@@@Z")]
            internal static extern void SetImmediateErrorFile_0(global::System.IntPtr instance, global::System.IntPtr fh);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CommandReturnObject> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CommandReturnObject>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static CommandReturnObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CommandReturnObject(native.ToPointer(), skipVTables);
        }

        public static CommandReturnObject __CreateInstance(CommandReturnObject.Internal native, bool skipVTables = false)
        {
            return new CommandReturnObject(native, skipVTables);
        }

        private static void* __CopyValue(CommandReturnObject.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.CommandReturnObject.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CommandReturnObject(CommandReturnObject.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CommandReturnObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CommandReturnObject()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public CommandReturnObject(LLDB.CommandReturnObject rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.CommandReturnObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint PutOutput(global::System.IntPtr fh)
        {
            var arg0 = fh;
            var __ret = Internal.PutOutput_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public uint PutError(global::System.IntPtr fh)
        {
            var arg0 = fh;
            var __ret = Internal.PutError_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public bool Succeeded()
        {
            var __ret = Internal.Succeeded_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool HasResult()
        {
            var __ret = Internal.HasResult_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void AppendMessage(string message)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(message);
            Internal.AppendMessage_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public void AppendWarning(string message)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(message);
            Internal.AppendWarning_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void SetImmediateOutputFile(global::System.IntPtr fh, bool transfer_ownership)
        {
            var arg0 = fh;
            Internal.SetImmediateOutputFile_1((__Instance + __PointerAdjustment), arg0, transfer_ownership);
        }

        public void SetImmediateErrorFile(global::System.IntPtr fh, bool transfer_ownership)
        {
            var arg0 = fh;
            Internal.SetImmediateErrorFile_1((__Instance + __PointerAdjustment), arg0, transfer_ownership);
        }

        public void PutCString(string @string, int len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(@string);
            Internal.PutCString_0((__Instance + __PointerAdjustment), arg0, len);
            Marshal.FreeHGlobal(arg0);
        }

        public uint Printf(string format)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(format);
            var __ret = Internal.Printf_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public string GetOutput(bool only_if_no_immediate)
        {
            var __ret = Internal.GetOutput_1((__Instance + __PointerAdjustment), only_if_no_immediate);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string GetError(bool only_if_no_immediate)
        {
            var __ret = Internal.GetError_1((__Instance + __PointerAdjustment), only_if_no_immediate);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public void SetError(LLDB.Error error, string fallback_error_cstr)
        {
            if (ReferenceEquals(error, null))
                throw new global::System.ArgumentNullException("error", "Cannot be null because it is a C++ reference (&).");
            var arg0 = error.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(fallback_error_cstr);
            Internal.SetError_0((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public string Output
        {
            get
            {
                var __ret = Internal.GetOutput_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string Error
        {
            get
            {
                var __ret = Internal.GetError_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetError_1((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public uint OutputSize
        {
            get
            {
                var __ret = Internal.GetOutputSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint ErrorSize
        {
            get
            {
                var __ret = Internal.GetErrorSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.ReturnStatus Status
        {
            get
            {
                var __ret = Internal.GetStatus_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetStatus_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public global::System.IntPtr ImmediateOutputFile
        {
            set
            {
                var arg0 = value;
                Internal.SetImmediateOutputFile_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public global::System.IntPtr ImmediateErrorFile
        {
            set
            {
                var arg0 = value;
                Internal.SetImmediateErrorFile_0((__Instance + __PointerAdjustment), arg0);
            }
        }
    }
}
