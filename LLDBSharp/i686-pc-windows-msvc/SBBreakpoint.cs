//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Breakpoint : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBBreakpoint@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBBreakpoint@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBBreakpoint@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??8SBBreakpoint@lldb@@QAE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??9SBBreakpoint@lldb@@QAE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBBreakpoint@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?ClearAllBreakpointSites@SBBreakpoint@lldb@@QAEXXZ")]
            internal static extern void ClearAllBreakpointSites_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindLocationByAddress@SBBreakpoint@lldb@@QAE?AVSBBreakpointLocation@2@_K@Z")]
            internal static extern void FindLocationByAddress_0(global::System.IntPtr instance, global::System.IntPtr @return, ulong vm_addr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindLocationIDByAddress@SBBreakpoint@lldb@@QAEH_K@Z")]
            internal static extern int FindLocationIDByAddress_0(global::System.IntPtr instance, ulong vm_addr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FindLocationByID@SBBreakpoint@lldb@@QAE?AVSBBreakpointLocation@2@H@Z")]
            internal static extern void FindLocationByID_0(global::System.IntPtr instance, global::System.IntPtr @return, int bp_loc_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLocationAtIndex@SBBreakpoint@lldb@@QAE?AVSBBreakpointLocation@2@I@Z")]
            internal static extern void GetLocationAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsEnabled@SBBreakpoint@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsOneShot@SBBreakpoint@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsOneShot_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsInternal@SBBreakpoint@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsInternal_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCallback@SBBreakpoint@lldb@@QAEXP6A_NPAXAAVSBProcess@2@AAVSBThread@2@AAVSBBreakpointLocation@2@@Z0@Z")]
            internal static extern void SetCallback_0(global::System.IntPtr instance, global::System.IntPtr callback, global::System.IntPtr baton);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetScriptCallbackBody@SBBreakpoint@lldb@@QAE?AVSBError@2@PBD@Z")]
            internal static extern void SetScriptCallbackBody_0(global::System.IntPtr instance, global::System.IntPtr @return, global::System.IntPtr script_body_text);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?AddName@SBBreakpoint@lldb@@QAE_NPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AddName_0(global::System.IntPtr instance, global::System.IntPtr new_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?RemoveName@SBBreakpoint@lldb@@QAEXPBD@Z")]
            internal static extern void RemoveName_0(global::System.IntPtr instance, global::System.IntPtr name_to_remove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?MatchesName@SBBreakpoint@lldb@@QAE_NPBD@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MatchesName_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNames@SBBreakpoint@lldb@@QAEXAAVSBStringList@2@@Z")]
            internal static extern void GetNames_0(global::System.IntPtr instance, global::System.IntPtr names);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBBreakpoint@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?EventIsBreakpointEvent@SBBreakpoint@lldb@@SA_NABVSBEvent@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EventIsBreakpointEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBreakpointEventTypeFromEvent@SBBreakpoint@lldb@@SA?AW4BreakpointEventType@2@ABVSBEvent@2@@Z")]
            internal static extern LLDB.BreakpointEventType GetBreakpointEventTypeFromEvent_0(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBreakpointFromEvent@SBBreakpoint@lldb@@SA?AV12@ABVSBEvent@2@@Z")]
            internal static extern void GetBreakpointFromEvent_0(global::System.IntPtr @return, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetBreakpointLocationAtIndexFromEvent@SBBreakpoint@lldb@@SA?AVSBBreakpointLocation@2@ABVSBEvent@2@I@Z")]
            internal static extern void GetBreakpointLocationAtIndexFromEvent_0(global::System.IntPtr @return, global::System.IntPtr @event, uint loc_idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?GetNumBreakpointLocationsFromEvent@SBBreakpoint@lldb@@SAIABVSBEvent@2@@Z")]
            internal static extern uint GetNumBreakpointLocationsFromEvent_0(global::System.IntPtr event_sp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetID@SBBreakpoint@lldb@@QBEHXZ")]
            internal static extern int GetID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetEnabled@SBBreakpoint@lldb@@QAEX_N@Z")]
            internal static extern void SetEnabled_0(global::System.IntPtr instance, bool enable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetOneShot@SBBreakpoint@lldb@@QAEX_N@Z")]
            internal static extern void SetOneShot_0(global::System.IntPtr instance, bool one_shot);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetHitCount@SBBreakpoint@lldb@@QBEIXZ")]
            internal static extern uint GetHitCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetIgnoreCount@SBBreakpoint@lldb@@QBEIXZ")]
            internal static extern uint GetIgnoreCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetIgnoreCount@SBBreakpoint@lldb@@QAEXI@Z")]
            internal static extern void SetIgnoreCount_0(global::System.IntPtr instance, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCondition@SBBreakpoint@lldb@@QAEPBDXZ")]
            internal static extern global::System.IntPtr GetCondition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetCondition@SBBreakpoint@lldb@@QAEXPBD@Z")]
            internal static extern void SetCondition_0(global::System.IntPtr instance, global::System.IntPtr condition);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetThreadID@SBBreakpoint@lldb@@QAE_KXZ")]
            internal static extern ulong GetThreadID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetThreadID@SBBreakpoint@lldb@@QAEX_K@Z")]
            internal static extern void SetThreadID_0(global::System.IntPtr instance, ulong sb_thread_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetThreadIndex@SBBreakpoint@lldb@@QBEIXZ")]
            internal static extern uint GetThreadIndex_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetThreadIndex@SBBreakpoint@lldb@@QAEXI@Z")]
            internal static extern void SetThreadIndex_0(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetThreadName@SBBreakpoint@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetThreadName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetThreadName@SBBreakpoint@lldb@@QAEXPBD@Z")]
            internal static extern void SetThreadName_0(global::System.IntPtr instance, global::System.IntPtr thread_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetQueueName@SBBreakpoint@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetQueueName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetQueueName@SBBreakpoint@lldb@@QAEXPBD@Z")]
            internal static extern void SetQueueName_0(global::System.IntPtr instance, global::System.IntPtr queue_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetScriptCallbackFunction@SBBreakpoint@lldb@@QAEXPBD@Z")]
            internal static extern void SetScriptCallbackFunction_0(global::System.IntPtr instance, global::System.IntPtr callback_function_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumResolvedLocations@SBBreakpoint@lldb@@QBEIXZ")]
            internal static extern uint GetNumResolvedLocations_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumLocations@SBBreakpoint@lldb@@QBEIXZ")]
            internal static extern uint GetNumLocations_0(global::System.IntPtr instance);
        }

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate bool BreakpointHitCallback(global::System.IntPtr baton, global::System.IntPtr process, global::System.IntPtr thread, global::System.IntPtr location);

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Breakpoint> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Breakpoint>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Breakpoint __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Breakpoint(native.ToPointer(), skipVTables);
        }

        public static Breakpoint __CreateInstance(Breakpoint.Internal native, bool skipVTables = false)
        {
            return new Breakpoint(native, skipVTables);
        }

        private static void* __CopyValue(Breakpoint.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            LLDB.Breakpoint.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Breakpoint(Breakpoint.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Breakpoint(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Breakpoint()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Breakpoint(LLDB.Breakpoint rhs)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Breakpoint __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static bool operator ==(LLDB.Breakpoint __op, LLDB.Breakpoint rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Breakpoint;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.Breakpoint __op, LLDB.Breakpoint rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void ClearAllBreakpointSites()
        {
            Internal.ClearAllBreakpointSites_0((__Instance + __PointerAdjustment));
        }

        public LLDB.BreakpointLocation FindLocationByAddress(ulong vm_addr)
        {
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.FindLocationByAddress_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), vm_addr);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public int FindLocationIDByAddress(ulong vm_addr)
        {
            var __ret = Internal.FindLocationIDByAddress_0((__Instance + __PointerAdjustment), vm_addr);
            return __ret;
        }

        public LLDB.BreakpointLocation FindLocationByID(int bp_loc_id)
        {
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.FindLocationByID_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), bp_loc_id);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public LLDB.BreakpointLocation GetLocationAtIndex(uint index)
        {
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.GetLocationAtIndex_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), index);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public bool IsEnabled()
        {
            var __ret = Internal.IsEnabled_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsOneShot()
        {
            var __ret = Internal.IsOneShot_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsInternal()
        {
            var __ret = Internal.IsInternal_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCallback(LLDB.Breakpoint.BreakpointHitCallback callback, global::System.IntPtr baton)
        {
            var arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var arg1 = baton;
            Internal.SetCallback_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public LLDB.Error SetScriptCallbackBody(string script_body_text)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(script_body_text);
            var __ret = new LLDB.Error.Internal();
            Internal.SetScriptCallbackBody_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return LLDB.Error.__CreateInstance(__ret);
        }

        public bool AddName(string new_name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(new_name);
            var __ret = Internal.AddName_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public void RemoveName(string name_to_remove)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name_to_remove);
            Internal.RemoveName_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public bool MatchesName(string name)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(name);
            var __ret = Internal.MatchesName_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public void GetNames(LLDB.StringList names)
        {
            if (ReferenceEquals(names, null))
                throw new global::System.ArgumentNullException("names", "Cannot be null because it is a C++ reference (&).");
            var arg0 = names.__Instance;
            Internal.GetNames_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public static bool EventIsBreakpointEvent(LLDB.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.EventIsBreakpointEvent_0(arg0);
            return __ret;
        }

        public static LLDB.BreakpointEventType GetBreakpointEventTypeFromEvent(LLDB.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.GetBreakpointEventTypeFromEvent_0(arg0);
            return __ret;
        }

        public static LLDB.Breakpoint GetBreakpointFromEvent(LLDB.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = new LLDB.Breakpoint.Internal();
            Internal.GetBreakpointFromEvent_0(new IntPtr(&__ret), arg0);
            return LLDB.Breakpoint.__CreateInstance(__ret);
        }

        public static LLDB.BreakpointLocation GetBreakpointLocationAtIndexFromEvent(LLDB.Event @event, uint loc_idx)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = new LLDB.BreakpointLocation.Internal();
            Internal.GetBreakpointLocationAtIndexFromEvent_0(new IntPtr(&__ret), arg0, loc_idx);
            return LLDB.BreakpointLocation.__CreateInstance(__ret);
        }

        public static uint GetNumBreakpointLocationsFromEvent(LLDB.Event event_sp)
        {
            if (ReferenceEquals(event_sp, null))
                throw new global::System.ArgumentNullException("event_sp", "Cannot be null because it is a C++ reference (&).");
            var arg0 = event_sp.__Instance;
            var __ret = Internal.GetNumBreakpointLocationsFromEvent_0(arg0);
            return __ret;
        }

        public int ID
        {
            get
            {
                var __ret = Internal.GetID_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool Enabled
        {
            set
            {
                Internal.SetEnabled_0((__Instance + __PointerAdjustment), value);
            }
        }

        public bool OneShot
        {
            set
            {
                Internal.SetOneShot_0((__Instance + __PointerAdjustment), value);
            }
        }

        public uint HitCount
        {
            get
            {
                var __ret = Internal.GetHitCount_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint IgnoreCount
        {
            get
            {
                var __ret = Internal.GetIgnoreCount_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetIgnoreCount_0((__Instance + __PointerAdjustment), value);
            }
        }

        public string Condition
        {
            get
            {
                var __ret = Internal.GetCondition_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetCondition_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public ulong ThreadID
        {
            get
            {
                var __ret = Internal.GetThreadID_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetThreadID_0((__Instance + __PointerAdjustment), value);
            }
        }

        public uint ThreadIndex
        {
            get
            {
                var __ret = Internal.GetThreadIndex_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            set
            {
                Internal.SetThreadIndex_0((__Instance + __PointerAdjustment), value);
            }
        }

        public string ThreadName
        {
            get
            {
                var __ret = Internal.GetThreadName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetThreadName_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string QueueName
        {
            get
            {
                var __ret = Internal.GetQueueName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetQueueName_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string ScriptCallbackFunction
        {
            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetScriptCallbackFunction_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public uint NumResolvedLocations
        {
            get
            {
                var __ret = Internal.GetNumResolvedLocations_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public uint NumLocations
        {
            get
            {
                var __ret = Internal.GetNumLocations_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
