//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Error : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBError@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBError@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBError@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBError@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Fail@SBError@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Fail_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Success@SBError@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Success_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetError@SBError@lldb@@QAEXIW4ErrorType@2@@Z")]
            internal static extern void SetError_0(global::System.IntPtr instance, uint err, LLDB.ErrorType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetErrorToErrno@SBError@lldb@@QAEXXZ")]
            internal static extern void SetErrorToErrno_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetErrorToGenericError@SBError@lldb@@QAEXXZ")]
            internal static extern void SetErrorToGenericError_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?SetErrorStringWithFormat@SBError@lldb@@QAAHPBDZZ")]
            internal static extern int SetErrorStringWithFormat_0(global::System.IntPtr instance, global::System.IntPtr format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBError@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBError@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCString@SBError@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetCString_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetError@SBError@lldb@@QBEIXZ")]
            internal static extern uint GetErrorCode_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetType@SBError@lldb@@QBE?AW4ErrorType@2@XZ")]
            internal static extern LLDB.ErrorType GetType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetErrorString@SBError@lldb@@QAEXPBD@Z")]
            internal static extern void SetErrorString_0(global::System.IntPtr instance, global::System.IntPtr err_str);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Error> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Error>();

        private readonly bool __ownsNativeInstance;

        public static Error __CreateInstance(global::System.IntPtr native)
        {
            return new Error((Error.Internal*) native);
        }

        public static Error __CreateInstance(Error.Internal native)
        {
            return new Error(native);
        }

        private static Error.Internal* __CopyValue(Error.Internal native)
        {
            var ret = (Error.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private Error(Error.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Error(Error.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public Error()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.Error __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public bool Fail()
        {
            var __ret = Internal.Fail_0(__Instance);
            return __ret;
        }

        public bool Success()
        {
            var __ret = Internal.Success_0(__Instance);
            return __ret;
        }

        public void SetError(uint err, LLDB.ErrorType type)
        {
            var arg0 = err;
            var arg1 = type;
            Internal.SetError_0(__Instance, arg0, arg1);
        }

        public void SetErrorToErrno()
        {
            Internal.SetErrorToErrno_0(__Instance);
        }

        public void SetErrorToGenericError()
        {
            Internal.SetErrorToGenericError_0(__Instance);
        }

        public int SetErrorStringWithFormat(string format)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(format);
            var __ret = Internal.SetErrorStringWithFormat_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            var arg0 = ReferenceEquals(description, null) ? global::System.IntPtr.Zero : description.__Instance;
            var __ret = Internal.GetDescription_0(__Instance, arg0);
            return __ret;
        }

        public string CString
        {
            get
            {
                var __ret = Internal.GetCString_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint ErrorCode
        {
            get
            {
                var __ret = Internal.GetErrorCode_0(__Instance);
                return __ret;
            }
        }

        public LLDB.ErrorType Type
        {
            get
            {
                var __ret = Internal.GetType_0(__Instance);
                return __ret;
            }
        }

        public string ErrorString
        {
            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetErrorString_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }
    }
}
