//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Address : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBAddress@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBAddress@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBAddress@lldb@@QAE@VSBSection@1@_K@Z")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance, LLDB.Section.Internal section, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBAddress@lldb@@QAE@_KAAVSBTarget@1@@Z")]
            internal static extern global::System.IntPtr ctor_3(global::System.IntPtr instance, ulong load_addr, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBAddress@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBAddress@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBAddress@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLoadAddress@SBAddress@lldb@@QBE_KABVSBTarget@2@@Z")]
            internal static extern ulong GetLoadAddress_0(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetAddress@SBAddress@lldb@@QAEXVSBSection@2@_K@Z")]
            internal static extern void SetAddress_0(global::System.IntPtr instance, LLDB.Section.Internal section, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetLoadAddress@SBAddress@lldb@@QAEX_KAAVSBTarget@2@@Z")]
            internal static extern void SetLoadAddress_0(global::System.IntPtr instance, ulong load_addr, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?OffsetAddress@SBAddress@lldb@@QAE_N_K@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OffsetAddress_0(global::System.IntPtr instance, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBAddress@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSymbolContext@SBAddress@lldb@@QAE?AVSBSymbolContext@2@I@Z")]
            internal static extern void GetSymbolContext_0(global::System.IntPtr instance, global::System.IntPtr @return, uint resolve_scope);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSection@SBAddress@lldb@@QAE?AVSBSection@2@XZ")]
            internal static extern void GetSection_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetModule@SBAddress@lldb@@QAE?AVSBModule@2@XZ")]
            internal static extern void GetModule_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetCompileUnit@SBAddress@lldb@@QAE?AVSBCompileUnit@2@XZ")]
            internal static extern void GetCompileUnit_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFunction@SBAddress@lldb@@QAE?AVSBFunction@2@XZ")]
            internal static extern void GetFunction_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBlock@SBAddress@lldb@@QAE?AVSBBlock@2@XZ")]
            internal static extern void GetBlock_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetSymbol@SBAddress@lldb@@QAE?AVSBSymbol@2@XZ")]
            internal static extern void GetSymbol_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLineEntry@SBAddress@lldb@@QAE?AVSBLineEntry@2@XZ")]
            internal static extern void GetLineEntry_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFileAddress@SBAddress@lldb@@QBE_KXZ")]
            internal static extern ulong GetFileAddress_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetOffset@SBAddress@lldb@@QAE_KXZ")]
            internal static extern ulong GetOffset_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetAddressClass@SBAddress@lldb@@QAE?AW4AddressClass@2@XZ")]
            internal static extern LLDB.AddressClass GetAddressClass_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Address> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Address>();

        private readonly bool __ownsNativeInstance;

        public static Address __CreateInstance(global::System.IntPtr native)
        {
            return new Address((Address.Internal*) native);
        }

        public static Address __CreateInstance(Address.Internal native)
        {
            return new Address(native);
        }

        private static Address.Internal* __CopyValue(Address.Internal native)
        {
            var ret = (Address.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private Address(Address.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Address(Address.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public Address()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public Address(LLDB.Section section, ulong offset)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(section, null) ? new LLDB.Section.Internal() : *(LLDB.Section.Internal*) (section.__Instance);
            var arg1 = offset;
            Internal.ctor_2(__Instance, arg0, arg1);
        }

        public Address(ulong load_addr, LLDB.Target target)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = load_addr;
            var arg1 = ReferenceEquals(target, null) ? global::System.IntPtr.Zero : target.__Instance;
            Internal.ctor_3(__Instance, arg0, arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.Address __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public ulong GetLoadAddress(LLDB.Target target)
        {
            var arg0 = ReferenceEquals(target, null) ? global::System.IntPtr.Zero : target.__Instance;
            var __ret = Internal.GetLoadAddress_0(__Instance, arg0);
            return __ret;
        }

        public void SetAddress(LLDB.Section section, ulong offset)
        {
            var arg0 = ReferenceEquals(section, null) ? new LLDB.Section.Internal() : *(LLDB.Section.Internal*) (section.__Instance);
            var arg1 = offset;
            Internal.SetAddress_0(__Instance, arg0, arg1);
        }

        public void SetLoadAddress(ulong load_addr, LLDB.Target target)
        {
            var arg0 = load_addr;
            var arg1 = ReferenceEquals(target, null) ? global::System.IntPtr.Zero : target.__Instance;
            Internal.SetLoadAddress_0(__Instance, arg0, arg1);
        }

        public bool OffsetAddress(ulong offset)
        {
            var arg0 = offset;
            var __ret = Internal.OffsetAddress_0(__Instance, arg0);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            var arg0 = ReferenceEquals(description, null) ? global::System.IntPtr.Zero : description.__Instance;
            var __ret = Internal.GetDescription_0(__Instance, arg0);
            return __ret;
        }

        public LLDB.SymbolContext GetSymbolContext(uint resolve_scope)
        {
            var arg0 = resolve_scope;
            var __ret = new LLDB.SymbolContext.Internal();
            Internal.GetSymbolContext_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.SymbolContext.__CreateInstance(__ret);
        }

        public LLDB.Section GetSection()
        {
            var __ret = new LLDB.Section.Internal();
            Internal.GetSection_0(__Instance, new IntPtr(&__ret));
            return LLDB.Section.__CreateInstance(__ret);
        }

        public LLDB.Module GetModule()
        {
            var __ret = new LLDB.Module.Internal();
            Internal.GetModule_0(__Instance, new IntPtr(&__ret));
            return LLDB.Module.__CreateInstance(__ret);
        }

        public LLDB.CompileUnit GetCompileUnit()
        {
            var __ret = new LLDB.CompileUnit.Internal();
            Internal.GetCompileUnit_0(__Instance, new IntPtr(&__ret));
            return LLDB.CompileUnit.__CreateInstance(__ret);
        }

        public LLDB.Function GetFunction()
        {
            var __ret = new LLDB.Function.Internal();
            Internal.GetFunction_0(__Instance, new IntPtr(&__ret));
            return LLDB.Function.__CreateInstance(__ret);
        }

        public LLDB.Block GetBlock()
        {
            var __ret = new LLDB.Block.Internal();
            Internal.GetBlock_0(__Instance, new IntPtr(&__ret));
            return LLDB.Block.__CreateInstance(__ret);
        }

        public LLDB.Symbol GetSymbol()
        {
            var __ret = new LLDB.Symbol.Internal();
            Internal.GetSymbol_0(__Instance, new IntPtr(&__ret));
            return LLDB.Symbol.__CreateInstance(__ret);
        }

        public LLDB.LineEntry GetLineEntry()
        {
            var __ret = new LLDB.LineEntry.Internal();
            Internal.GetLineEntry_0(__Instance, new IntPtr(&__ret));
            return LLDB.LineEntry.__CreateInstance(__ret);
        }

        public ulong FileAddress
        {
            get
            {
                var __ret = Internal.GetFileAddress_0(__Instance);
                return __ret;
            }
        }

        public ulong Offset
        {
            get
            {
                var __ret = Internal.GetOffset_0(__Instance);
                return __ret;
            }
        }

        public LLDB.AddressClass AddressClass
        {
            get
            {
                var __ret = Internal.GetAddressClass_0(__Instance);
                return __ret;
            }
        }
    }
}
