//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace lldb_private
{
    namespace SharingPtr
    {

        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public unsafe partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr ptr_;

            [FieldOffset(4)]
            public global::System.IntPtr cntrl_;
        }
    }

    namespace imp
    {
        public unsafe abstract partial class shared_count : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr vfptr0;

                [FieldOffset(4)]
                public int shared_owners_;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0shared_count@imp@lldb_private@@QAE@J@Z")]
                internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, int refs);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1shared_count@imp@lldb_private@@MAE@XZ")]
                internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?add_shared@shared_count@imp@lldb_private@@QAEXXZ")]
                internal static extern void add_shared_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?release_shared@shared_count@imp@lldb_private@@QAEXXZ")]
                internal static extern void release_shared_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?use_count@shared_count@imp@lldb_private@@QBEJXZ")]
                internal static extern int use_count_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, shared_count> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, shared_count>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static shared_count __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new shared_countInternal(native.ToPointer(), skipVTables);
            }

            public static shared_count __CreateInstance(shared_count.Internal native, bool skipVTables = false)
            {
                return new shared_countInternal(native, skipVTables);
            }

            protected shared_count(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (skipVTables)
                    __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
                else
                    SetupVTables(true);
            }

            protected shared_count(int refs)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment), refs);
                SetupVTables(GetType().FullName == "lldb.lldb_private.imp.shared_count");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                lldb_private.imp.shared_count __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                if (__slot != null)
                {
                    var ___dtor_0Delegate = (Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_int));
                    ___dtor_0Delegate((__Instance + __PointerAdjustment), 0);
                }
                else
                    Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public void add_shared()
            {
                Internal.add_shared_0((__Instance + __PointerAdjustment));
            }

            public void release_shared()
            {
                Internal.release_shared_0((__Instance + __PointerAdjustment));
            }

            public int use_count()
            {
                var __ret = Internal.use_count_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            protected int shared_owners_
            {
                get
                {
                    return ((Internal*) __Instance)->shared_owners_;
                }

                set
                {
                    ((Internal*) __Instance)->shared_owners_ = value;
                }
            }

            #region Virtual table interop

            // virtual ~shared_count()
            private static Delegates.Action_IntPtr_int _dtor_0DelegateInstance;

            private static void _dtor_0DelegateHook(global::System.IntPtr instance, int delete)
            {
                if (!NativeToManagedMap.ContainsKey(instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (shared_count) NativeToManagedMap[instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(false);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;

            private void SetupVTables(bool destructorOnly = false)
            {
                if (__OriginalVTables != null)
                    return;
                var native = (Internal*) __Instance.ToPointer();

                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtor_0DelegateInstance += _dtor_0DelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                }

                if (destructorOnly)
                {
                    if (__ManagedVTablesDtorOnly == null)
                    {
                        __ManagedVTablesDtorOnly = new void*[1];
                        var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                        __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                        *(void**)(vfptr0 + 0) = _Thunks[0];
                        *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    }

                    native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
                }
                else
                {
                    if (__ManagedVTables == null)
                    {
                        __ManagedVTables = new void*[1];
                        var vfptr0 = Marshal.AllocHGlobal(2 * 4);
                        __ManagedVTables[0] = vfptr0.ToPointer();
                        *(void**)(vfptr0 + 0) = _Thunks[0];
                        *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    }

                    native->vfptr0 = new IntPtr(__ManagedVTables[0]);
                }
            }

            #endregion
        }

        internal unsafe partial class shared_countInternal : lldb_private.imp.shared_count, IDisposable
        {
            private static void* __CopyValue(shared_count.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(shared_count.Internal*) ret = native;
                return ret.ToPointer();
            }

            internal shared_countInternal(shared_count.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            internal shared_countInternal(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                __Instance = new global::System.IntPtr(native);
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            }
        }
    }
}
