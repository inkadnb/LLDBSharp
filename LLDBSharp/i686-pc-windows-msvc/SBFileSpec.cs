//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class FileSpec : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBFileSpec@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBFileSpec@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBFileSpec@lldb@@QAE@PBD@Z")]
            internal static extern global::System.IntPtr ctor_2(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBFileSpec@lldb@@QAE@PBD_N@Z")]
            internal static extern global::System.IntPtr ctor_3(global::System.IntPtr instance, global::System.IntPtr path, bool resolve);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBFileSpec@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBFileSpec@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Exists@SBFileSpec@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Exists_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?ResolveExecutableLocation@SBFileSpec@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ResolveExecutableLocation_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPath@SBFileSpec@lldb@@QBEIPADI@Z")]
            internal static extern uint GetPath_0(global::System.IntPtr instance, sbyte* dst_path, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?ResolvePath@SBFileSpec@lldb@@SAHPBDPADI@Z")]
            internal static extern int ResolvePath_0(global::System.IntPtr src_path, sbyte* dst_path, uint dst_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBFileSpec@lldb@@QBE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetFilename@SBFileSpec@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetFilename_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetFilename@SBFileSpec@lldb@@QAEXPBD@Z")]
            internal static extern void SetFilename_0(global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDirectory@SBFileSpec@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetDirectory_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?SetDirectory@SBFileSpec@lldb@@QAEXPBD@Z")]
            internal static extern void SetDirectory_0(global::System.IntPtr instance, global::System.IntPtr directory);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSpec> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSpec>();

        private readonly bool __ownsNativeInstance;

        public static FileSpec __CreateInstance(global::System.IntPtr native)
        {
            return new FileSpec((FileSpec.Internal*) native);
        }

        public static FileSpec __CreateInstance(FileSpec.Internal native)
        {
            return new FileSpec(native);
        }

        private static FileSpec.Internal* __CopyValue(FileSpec.Internal native)
        {
            var ret = (FileSpec.Internal*) Marshal.AllocHGlobal(4);
            *ret = native;
            return ret;
        }

        private FileSpec(FileSpec.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FileSpec(FileSpec.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public FileSpec()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public FileSpec(string path)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            Internal.ctor_2(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public FileSpec(string path, bool resolve)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            Internal.ctor_3(__Instance, arg0, resolve);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.FileSpec __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public bool Exists()
        {
            var __ret = Internal.Exists_0(__Instance);
            return __ret;
        }

        public bool ResolveExecutableLocation()
        {
            var __ret = Internal.ResolveExecutableLocation_0(__Instance);
            return __ret;
        }

        public uint GetPath(sbyte* dst_path, uint dst_len)
        {
            var arg0 = dst_path;
            var arg1 = dst_len;
            var __ret = Internal.GetPath_0(__Instance, arg0, arg1);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            var arg0 = ReferenceEquals(description, null) ? global::System.IntPtr.Zero : description.__Instance;
            var __ret = Internal.GetDescription_0(__Instance, arg0);
            return __ret;
        }

        public static int ResolvePath(string src_path, sbyte* dst_path, uint dst_len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(src_path);
            var arg1 = dst_path;
            var arg2 = dst_len;
            var __ret = Internal.ResolvePath_0(arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public string Filename
        {
            get
            {
                var __ret = Internal.GetFilename_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetFilename_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public string Directory
        {
            get
            {
                var __ret = Internal.GetDirectory_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetDirectory_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }
    }
}
