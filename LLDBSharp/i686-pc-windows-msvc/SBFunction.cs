//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Function : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_opaque_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBFunction@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBFunction@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBFunction@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBFunction@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetInstructions@SBFunction@lldb@@QAE?AVSBInstructionList@2@VSBTarget@2@@Z")]
            internal static extern LLDB.InstructionList.Internal GetInstructions_0(global::System.IntPtr instance, LLDB.Target.Internal target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetInstructions@SBFunction@lldb@@QAE?AVSBInstructionList@2@VSBTarget@2@PBD@Z")]
            internal static extern LLDB.InstructionList.Internal GetInstructions_1(global::System.IntPtr instance, LLDB.Target.Internal target, global::System.IntPtr flavor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetStartAddress@SBFunction@lldb@@QAE?AVSBAddress@2@XZ")]
            internal static extern void GetStartAddress_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetEndAddress@SBFunction@lldb@@QAE?AVSBAddress@2@XZ")]
            internal static extern void GetEndAddress_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetArgumentName@SBFunction@lldb@@QAEPBDI@Z")]
            internal static extern global::System.IntPtr GetArgumentName_0(global::System.IntPtr instance, uint arg_idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetType@SBFunction@lldb@@QAE?AVSBType@2@XZ")]
            internal static extern void GetType_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetBlock@SBFunction@lldb@@QAE?AVSBBlock@2@XZ")]
            internal static extern void GetBlock_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??8SBFunction@lldb@@QBE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??9SBFunction@lldb@@QBE_NABV01@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDescription@SBFunction@lldb@@QAE_NAAVSBStream@2@@Z")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDescription_0(global::System.IntPtr instance, global::System.IntPtr description);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBFunction@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetDisplayName@SBFunction@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetDisplayName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetMangledName@SBFunction@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetMangledName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPrologueByteSize@SBFunction@lldb@@QAEIXZ")]
            internal static extern uint GetPrologueByteSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetLanguage@SBFunction@lldb@@QAE?AW4LanguageType@2@XZ")]
            internal static extern LLDB.LanguageType GetLanguage_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetIsOptimized@SBFunction@lldb@@QAE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetIsOptimized_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Function> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Function>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Function __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Function(native.ToPointer(), skipVTables);
        }

        public static Function __CreateInstance(Function.Internal native, bool skipVTables = false)
        {
            return new Function(native, skipVTables);
        }

        private static void* __CopyValue(Function.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            LLDB.Function.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Function(Function.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Function(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Function()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public Function(LLDB.Function rhs)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rhs.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            LLDB.Function __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public LLDB.InstructionList GetInstructions(LLDB.Target target)
        {
            var arg0 = ReferenceEquals(target, null) ? new LLDB.Target.Internal() : *(LLDB.Target.Internal*) (target.__Instance);
            var __ret = Internal.GetInstructions_0((__Instance + __PointerAdjustment), arg0);
            return LLDB.InstructionList.__CreateInstance(__ret);
        }

        public LLDB.InstructionList GetInstructions(LLDB.Target target, string flavor)
        {
            var arg0 = ReferenceEquals(target, null) ? new LLDB.Target.Internal() : *(LLDB.Target.Internal*) (target.__Instance);
            var arg1 = Marshal.StringToHGlobalAnsi(flavor);
            var __ret = Internal.GetInstructions_1((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return LLDB.InstructionList.__CreateInstance(__ret);
        }

        public LLDB.Address GetStartAddress()
        {
            var __ret = new LLDB.Address.Internal();
            Internal.GetStartAddress_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Address.__CreateInstance(__ret);
        }

        public LLDB.Address GetEndAddress()
        {
            var __ret = new LLDB.Address.Internal();
            Internal.GetEndAddress_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Address.__CreateInstance(__ret);
        }

        public string GetArgumentName(uint arg_idx)
        {
            var __ret = Internal.GetArgumentName_0((__Instance + __PointerAdjustment), arg_idx);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public LLDB.Type GetType()
        {
            var __ret = new LLDB.Type.Internal();
            Internal.GetType_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Type.__CreateInstance(__ret);
        }

        public LLDB.Block GetBlock()
        {
            var __ret = new LLDB.Block.Internal();
            Internal.GetBlock_0((__Instance + __PointerAdjustment), new IntPtr(&__ret));
            return LLDB.Block.__CreateInstance(__ret);
        }

        public static bool operator ==(LLDB.Function __op, LLDB.Function rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as Function;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(LLDB.Function __op, LLDB.Function rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var arg0 = __op.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public bool GetDescription(LLDB.Stream description)
        {
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg0 = description.__Instance;
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string DisplayName
        {
            get
            {
                var __ret = Internal.GetDisplayName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public string MangledName
        {
            get
            {
                var __ret = Internal.GetMangledName_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint PrologueByteSize
        {
            get
            {
                var __ret = Internal.GetPrologueByteSize_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public LLDB.LanguageType Language
        {
            get
            {
                var __ret = Internal.GetLanguage_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }

        public bool IsOptimized
        {
            get
            {
                var __ret = Internal.GetIsOptimized_0((__Instance + __PointerAdjustment));
                return __ret;
            }
        }
    }
}
