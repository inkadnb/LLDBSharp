//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class Queue : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBQueue@lldb@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SBQueue@lldb@@QAE@ABV01@@Z")]
            internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1SBQueue@lldb@@QAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?IsValid@SBQueue@lldb@@QBE_NXZ")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?Clear@SBQueue@lldb@@QAEXXZ")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetProcess@SBQueue@lldb@@QAE?AVSBProcess@2@XZ")]
            internal static extern void GetProcess_0(global::System.IntPtr instance, global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetThreadAtIndex@SBQueue@lldb@@QAE?AVSBThread@2@I@Z")]
            internal static extern void GetThreadAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetPendingItemAtIndex@SBQueue@lldb@@QAE?AVSBQueueItem@2@I@Z")]
            internal static extern void GetPendingItemAtIndex_0(global::System.IntPtr instance, global::System.IntPtr @return, uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FetchThreads@SBQueue@lldb@@IAEXXZ")]
            internal static extern void FetchThreads_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?FetchItems@SBQueue@lldb@@IAEXXZ")]
            internal static extern void FetchItems_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetQueueID@SBQueue@lldb@@QBE_KXZ")]
            internal static extern ulong GetQueueID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetName@SBQueue@lldb@@QBEPBDXZ")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetIndexID@SBQueue@lldb@@QBEIXZ")]
            internal static extern uint GetIndexID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumThreads@SBQueue@lldb@@QAEIXZ")]
            internal static extern uint GetNumThreads_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumPendingItems@SBQueue@lldb@@QAEIXZ")]
            internal static extern uint GetNumPendingItems_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetNumRunningItems@SBQueue@lldb@@QAEIXZ")]
            internal static extern uint GetNumRunningItems_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="?GetKind@SBQueue@lldb@@QAE?AW4QueueKind@2@XZ")]
            internal static extern LLDB.QueueKind GetKind_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Queue> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Queue>();

        private readonly bool __ownsNativeInstance;

        public static Queue __CreateInstance(global::System.IntPtr native)
        {
            return new Queue((Queue.Internal*) native);
        }

        public static Queue __CreateInstance(Queue.Internal native)
        {
            return new Queue(native);
        }

        private static Queue.Internal* __CopyValue(Queue.Internal native)
        {
            var ret = (Queue.Internal*) Marshal.AllocHGlobal(8);
            *ret = native;
            return ret;
        }

        private Queue(Queue.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Queue(Queue.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public Queue()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.Queue __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance, 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0(__Instance);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0(__Instance);
        }

        public LLDB.Process GetProcess()
        {
            var __ret = new LLDB.Process.Internal();
            Internal.GetProcess_0(__Instance, new IntPtr(&__ret));
            return LLDB.Process.__CreateInstance(__ret);
        }

        public LLDB.Thread GetThreadAtIndex(uint _0)
        {
            var arg0 = _0;
            var __ret = new LLDB.Thread.Internal();
            Internal.GetThreadAtIndex_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.Thread.__CreateInstance(__ret);
        }

        public LLDB.QueueItem GetPendingItemAtIndex(uint _0)
        {
            var arg0 = _0;
            var __ret = new LLDB.QueueItem.Internal();
            Internal.GetPendingItemAtIndex_0(__Instance, new IntPtr(&__ret), arg0);
            return LLDB.QueueItem.__CreateInstance(__ret);
        }

        protected void FetchThreads()
        {
            Internal.FetchThreads_0(__Instance);
        }

        protected void FetchItems()
        {
            Internal.FetchItems_0(__Instance);
        }

        public ulong QueueID
        {
            get
            {
                var __ret = Internal.GetQueueID_0(__Instance);
                return __ret;
            }
        }

        public string Name
        {
            get
            {
                var __ret = Internal.GetName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public uint IndexID
        {
            get
            {
                var __ret = Internal.GetIndexID_0(__Instance);
                return __ret;
            }
        }

        public uint NumThreads
        {
            get
            {
                var __ret = Internal.GetNumThreads_0(__Instance);
                return __ret;
            }
        }

        public uint NumPendingItems
        {
            get
            {
                var __ret = Internal.GetNumPendingItems_0(__Instance);
                return __ret;
            }
        }

        public uint NumRunningItems
        {
            get
            {
                var __ret = Internal.GetNumRunningItems_0(__Instance);
                return __ret;
            }
        }

        public LLDB.QueueKind Kind
        {
            get
            {
                var __ret = Internal.GetKind_0(__Instance);
                return __ret;
            }
        }
    }
}
