//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LLDB
{
    public unsafe partial class AttachInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfoC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfoC2Ey")]
            internal static extern void ctor_1(global::System.IntPtr instance, ulong pid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfoC2EPKcb")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr path, bool wait_for);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfoC2ERKS0_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfoD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo13SetExecutableEPKc")]
            internal static extern void SetExecutable_0(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo13SetExecutableENS_10SBFileSpecE")]
            internal static extern void SetExecutable_1(global::System.IntPtr instance, LLDB.FileSpec.Internal exe_file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo13UserIDIsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool UserIDIsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo14GroupIDIsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GroupIDIsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo22EffectiveUserIDIsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EffectiveUserIDIsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo23EffectiveGroupIDIsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EffectiveGroupIDIsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo22ParentProcessIDIsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParentProcessIDIsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo11GetListenerEv")]
            internal static extern void GetListener_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo12GetProcessIDEv")]
            internal static extern ulong GetProcessID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo12SetProcessIDEy")]
            internal static extern void SetProcessID_0(global::System.IntPtr instance, ulong pid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo16GetWaitForLaunchEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetWaitForLaunch_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo16SetWaitForLaunchEb")]
            internal static extern void SetWaitForLaunch_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo17GetIgnoreExistingEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetIgnoreExisting_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo17SetIgnoreExistingEb")]
            internal static extern void SetIgnoreExisting_0(global::System.IntPtr instance, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo14GetResumeCountEv")]
            internal static extern uint GetResumeCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo14SetResumeCountEj")]
            internal static extern void SetResumeCount_0(global::System.IntPtr instance, uint c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo20GetProcessPluginNameEv")]
            internal static extern global::System.IntPtr GetProcessPluginName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo20SetProcessPluginNameEPKc")]
            internal static extern void SetProcessPluginName_0(global::System.IntPtr instance, global::System.IntPtr plugin_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo9GetUserIDEv")]
            internal static extern uint GetUserID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo9SetUserIDEj")]
            internal static extern void SetUserID_0(global::System.IntPtr instance, uint uid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo10GetGroupIDEv")]
            internal static extern uint GetGroupID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo10SetGroupIDEj")]
            internal static extern void SetGroupID_0(global::System.IntPtr instance, uint gid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo18GetEffectiveUserIDEv")]
            internal static extern uint GetEffectiveUserID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo18SetEffectiveUserIDEj")]
            internal static extern void SetEffectiveUserID_0(global::System.IntPtr instance, uint uid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo19GetEffectiveGroupIDEv")]
            internal static extern uint GetEffectiveGroupID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo19SetEffectiveGroupIDEj")]
            internal static extern void SetEffectiveGroupID_0(global::System.IntPtr instance, uint gid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo18GetParentProcessIDEv")]
            internal static extern ulong GetParentProcessID_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo18SetParentProcessIDEy")]
            internal static extern void SetParentProcessID_0(global::System.IntPtr instance, ulong pid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("lldb", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4lldb12SBAttachInfo11SetListenerERNS_10SBListenerE")]
            internal static extern void SetListener_0(global::System.IntPtr instance, global::System.IntPtr listener);
        }

        public global::System.IntPtr __Instance { get; protected set; }
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, AttachInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, AttachInfo>();

        private readonly bool __ownsNativeInstance;

        public static AttachInfo __CreateInstance(global::System.IntPtr native)
        {
            return new AttachInfo((AttachInfo.Internal*) native);
        }

        public static AttachInfo __CreateInstance(AttachInfo.Internal native)
        {
            return new AttachInfo(native);
        }

        private static AttachInfo.Internal* __CopyValue(AttachInfo.Internal native)
        {
            var ret = (AttachInfo.Internal*) Marshal.AllocHGlobal(8);
            *ret = native;
            return ret;
        }

        private AttachInfo(AttachInfo.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AttachInfo(AttachInfo.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        public AttachInfo()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0(__Instance);
        }

        public AttachInfo(ulong pid)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = pid;
            Internal.ctor_1(__Instance, arg0);
        }

        public AttachInfo(string path, bool wait_for)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            Internal.ctor_2(__Instance, arg0, wait_for);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            DestroyNativeInstance(false);
        }

        public virtual void DestroyNativeInstance()
        {
            DestroyNativeInstance(true);
        }

        private void DestroyNativeInstance(bool force)
        {
            LLDB.AttachInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance || force)
                Internal.dtor_0(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void SetExecutable(string path)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(path);
            Internal.SetExecutable_0(__Instance, arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public void SetExecutable(LLDB.FileSpec exe_file)
        {
            var arg0 = ReferenceEquals(exe_file, null) ? new LLDB.FileSpec.Internal() : *(LLDB.FileSpec.Internal*) (exe_file.__Instance);
            Internal.SetExecutable_1(__Instance, arg0);
        }

        public bool UserIDIsValid()
        {
            var __ret = Internal.UserIDIsValid_0(__Instance);
            return __ret;
        }

        public bool GroupIDIsValid()
        {
            var __ret = Internal.GroupIDIsValid_0(__Instance);
            return __ret;
        }

        public bool EffectiveUserIDIsValid()
        {
            var __ret = Internal.EffectiveUserIDIsValid_0(__Instance);
            return __ret;
        }

        public bool EffectiveGroupIDIsValid()
        {
            var __ret = Internal.EffectiveGroupIDIsValid_0(__Instance);
            return __ret;
        }

        public bool ParentProcessIDIsValid()
        {
            var __ret = Internal.ParentProcessIDIsValid_0(__Instance);
            return __ret;
        }

        /// <summary>
        /// <para>Get the listener that will be used to receive process
        /// events.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Get the listener that will be used to receive process
        /// events.</para>
        /// <para>    ///</para>
        /// <para>    /// If no listener has been set via a call to</para>
        /// <para>    /// SBLaunchInfo::SetListener(), then an invalid SBListener
        /// will be</para>
        /// <para>    /// returned (SBListener::IsValid() will return false). If a
        /// listener</para>
        /// <para>    /// has been set, then the valid listener object will be
        /// returned.</para>
        /// </remarks>
        public LLDB.Listener GetListener()
        {
            var __ret = new LLDB.Listener.Internal();
            Internal.GetListener_0(new IntPtr(&__ret), __Instance);
            return LLDB.Listener.__CreateInstance(__ret);
        }

        public ulong ProcessID
        {
            get
            {
                var __ret = Internal.GetProcessID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetProcessID_0(__Instance, arg0);
            }
        }

        public bool WaitForLaunch
        {
            get
            {
                var __ret = Internal.GetWaitForLaunch_0(__Instance);
                return __ret;
            }

            set
            {
                Internal.SetWaitForLaunch_0(__Instance, value);
            }
        }

        public bool IgnoreExisting
        {
            get
            {
                var __ret = Internal.GetIgnoreExisting_0(__Instance);
                return __ret;
            }

            set
            {
                Internal.SetIgnoreExisting_0(__Instance, value);
            }
        }

        public uint ResumeCount
        {
            get
            {
                var __ret = Internal.GetResumeCount_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetResumeCount_0(__Instance, arg0);
            }
        }

        public string ProcessPluginName
        {
            get
            {
                var __ret = Internal.GetProcessPluginName_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            set
            {
                var arg0 = Marshal.StringToHGlobalAnsi(value);
                Internal.SetProcessPluginName_0(__Instance, arg0);
                Marshal.FreeHGlobal(arg0);
            }
        }

        public uint UserID
        {
            get
            {
                var __ret = Internal.GetUserID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetUserID_0(__Instance, arg0);
            }
        }

        public uint GroupID
        {
            get
            {
                var __ret = Internal.GetGroupID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetGroupID_0(__Instance, arg0);
            }
        }

        public uint EffectiveUserID
        {
            get
            {
                var __ret = Internal.GetEffectiveUserID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetEffectiveUserID_0(__Instance, arg0);
            }
        }

        public uint EffectiveGroupID
        {
            get
            {
                var __ret = Internal.GetEffectiveGroupID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetEffectiveGroupID_0(__Instance, arg0);
            }
        }

        public ulong ParentProcessID
        {
            get
            {
                var __ret = Internal.GetParentProcessID_0(__Instance);
                return __ret;
            }

            set
            {
                var arg0 = value;
                Internal.SetParentProcessID_0(__Instance, arg0);
            }
        }

        public LLDB.Listener Listener
        {
            set
            {
                var arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                Internal.SetListener_0(__Instance, arg0);
            }
        }
    }
}
